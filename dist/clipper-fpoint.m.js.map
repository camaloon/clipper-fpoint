{"version":3,"file":"clipper-fpoint.m.js","sources":["../src/clipper_unminified.js"],"sourcesContent":["/*******************************************************************************\n *                                                                              *\n * Author    :  Angus Johnson                                                   *\n * Version   :  6.4.2                                                           *\n * Date      :  27 February 2017                                                *\n * Website   :  http://www.angusj.com                                           *\n * Copyright :  Angus Johnson 2010-2017                                         *\n *                                                                              *\n * License:                                                                     *\n * Use, modification & distribution is subject to Boost Software License Ver 1. *\n * http://www.boost.org/LICENSE_1_0.txt                                         *\n *                                                                              *\n * Attributions:                                                                *\n * The code in this library is an extension of Bala Vatti's clipping algorithm: *\n * \"A generic solution to polygon clipping\"                                     *\n * Communications of the ACM, Vol 35, Issue 7 (July 1992) pp 56-63.             *\n * http://portal.acm.org/citation.cfm?id=129906                                 *\n *                                                                              *\n * Computer graphics and geometric modeling: implementation and algorithms      *\n * By Max K. Agoston                                                            *\n * Springer; 1 edition (January 4, 2005)                                        *\n * http://books.google.com/books?q=vatti+clipping+agoston                       *\n *                                                                              *\n * See also:                                                                    *\n * \"Polygon Offsetting by Computing Winding Numbers\"                            *\n * Paper no. DETC2005-85513 pp. 565-575                                         *\n * ASME 2005 International Design Engineering Technical Conferences             *\n * and Computers and Information in Engineering Conference (IDETC/CIE2005)      *\n * September 24-28, 2005 , Long Beach, California, USA                          *\n * http://www.me.berkeley.edu/~mcmains/pubs/DAC05OffsetPolygon.pdf              *\n *                                                                              *\n *******************************************************************************/\n/*******************************************************************************\n *                                                                              *\n * Author    :  Timo                                                            *\n * Version   :  6.4.2.2 (FPoint)                                                *\n * Date      :  8 September 2017                                                *\n *                                                                              *\n * This is a translation of the C# Clipper library to Javascript.               *\n *                                                                              *\n *******************************************************************************/\n\nvar ClipperLib = {};\nClipperLib.version = '6.4.2.2';\n\n//UseLines: Enables open path clipping. Adds a very minor cost to performance.\nClipperLib.use_lines = false;\n\n//ClipperLib.use_xyz: adds a Z member to FPoint. Adds a minor cost to performance.\nClipperLib.use_xyz = false;\n// Here starts the actual Clipper library:\n// Helper function to support Inheritance in Javascript\nvar Inherit = function (ce, ce2) {\n  var p;\n  if (typeof (Object.getOwnPropertyNames) === 'undefined') {\n    for (p in ce2.prototype)\n      if (typeof (ce.prototype[p]) === 'undefined' || ce.prototype[p] === Object.prototype[p]) ce.prototype[p] = ce2.prototype[p];\n    for (p in ce2)\n      if (typeof (ce[p]) === 'undefined') ce[p] = ce2[p];\n    ce.$baseCtor = ce2;\n  } else {\n    var props = Object.getOwnPropertyNames(ce2.prototype);\n    for (var i = 0; i < props.length; i++)\n      if (typeof (Object.getOwnPropertyDescriptor(ce.prototype, props[i])) === 'undefined') Object.defineProperty(ce.prototype, props[i], Object.getOwnPropertyDescriptor(ce2.prototype, props[i]));\n    for (p in ce2)\n      if (typeof (ce[p]) === 'undefined') ce[p] = ce2[p];\n    ce.$baseCtor = ce2;\n  }\n};\n\n/**\n * @constructor\n */\nClipperLib.Path = function () {\n  return [];\n};\n\nClipperLib.Path.prototype.push = Array.prototype.push;\n\n/**\n * @constructor\n */\nClipperLib.Paths = function () {\n  return []; // Was previously [[]], but caused problems when pushed\n};\n\nClipperLib.Paths.prototype.push = Array.prototype.push;\n\n// PolyTree & PolyNode start\n/**\n * @suppress {missingProperties}\n */\nClipperLib.PolyNode = function () {\n  this.m_Parent = null;\n  this.m_polygon = new ClipperLib.Path();\n  this.m_Index = 0;\n  this.m_jointype = 0;\n  this.m_endtype = 0;\n  this.m_Childs = [];\n  this.IsOpen = false;\n};\n\nClipperLib.PolyNode.prototype.IsHoleNode = function () {\n  var result = true;\n  var node = this.m_Parent;\n  while (node !== null) {\n    result = !result;\n    node = node.m_Parent;\n  }\n  return result;\n};\n\nClipperLib.PolyNode.prototype.ChildCount = function () {\n  return this.m_Childs.length;\n};\n\nClipperLib.PolyNode.prototype.Contour = function () {\n  return this.m_polygon;\n};\n\nClipperLib.PolyNode.prototype.AddChild = function (Child) {\n  var cnt = this.m_Childs.length;\n  this.m_Childs.push(Child);\n  Child.m_Parent = this;\n  Child.m_Index = cnt;\n};\n\nClipperLib.PolyNode.prototype.GetNext = function () {\n  if (this.m_Childs.length > 0)\n    return this.m_Childs[0];\n  else\n    return this.GetNextSiblingUp();\n};\n\nClipperLib.PolyNode.prototype.GetNextSiblingUp = function () {\n  if (this.m_Parent === null)\n    return null;\n  else if (this.m_Index === this.m_Parent.m_Childs.length - 1)\n    return this.m_Parent.GetNextSiblingUp();\n  else\n    return this.m_Parent.m_Childs[this.m_Index + 1];\n};\n\nClipperLib.PolyNode.prototype.Childs = function () {\n  return this.m_Childs;\n};\n\nClipperLib.PolyNode.prototype.Parent = function () {\n  return this.m_Parent;\n};\n\nClipperLib.PolyNode.prototype.IsHole = function () {\n  return this.IsHoleNode();\n};\n\n// PolyTree : PolyNode\n/**\n * @suppress {missingProperties}\n * @constructor\n */\nClipperLib.PolyTree = function () {\n  this.m_AllPolys = [];\n  ClipperLib.PolyNode.call(this);\n};\n\nClipperLib.PolyTree.prototype.Clear = function () {\n  for (var i = 0, ilen = this.m_AllPolys.length; i < ilen; i++)\n    this.m_AllPolys[i] = null;\n  this.m_AllPolys.length = 0;\n  this.m_Childs.length = 0;\n};\n\nClipperLib.PolyTree.prototype.GetFirst = function () {\n  if (this.m_Childs.length > 0)\n    return this.m_Childs[0];\n  else\n    return null;\n};\n\nClipperLib.PolyTree.prototype.Total = function () {\n  var result = this.m_AllPolys.length;\n  //with negative offsets, ignore the hidden outer polygon ...\n  if (result > 0 && this.m_Childs[0] !== this.m_AllPolys[0]) result--;\n  return result;\n};\n\nInherit(ClipperLib.PolyTree, ClipperLib.PolyNode);\n\n// PolyTree & PolyNode end\n\nClipperLib.Clear = function (a) {\n  a.length = 0;\n};\n\n//ClipperLib.MaxSteps = 64; // How many steps at maximum in arc in BuildArc() function\nClipperLib.PI = 3.141592653589793;\nClipperLib.PI2 = 2 * 3.141592653589793;\n/**\n * @constructor\n */\nClipperLib.FPoint = function () {\n  var a = arguments,\n    alen = a.length;\n  this[0] = 0;\n  this[1] = 0;\n  if (ClipperLib.use_xyz) {\n    this.Z = 0;\n    if (alen === 3) // public FPoint(cInt x, cInt y, cInt z = 0)\n    {\n      this[0] = a[0];\n      this[1] = a[1];\n      this.Z = a[2];\n    } else if (alen === 2) // public FPoint(cInt x, cInt y)\n    {\n      this[0] = a[0];\n      this[1] = a[1];\n      this.Z = 0;\n    } else if (alen === 1) {\n      if (a[0] instanceof ClipperLib.FPoint) // public FPoint(FPoint dp)\n      {\n        var dp = a[0];\n        this[0] = dp[0];\n        this[1] = dp[1];\n        this.Z = 0;\n      } else // public FPoint(FPoint pt)\n      {\n        var pt = a[0];\n        if (typeof (pt.Z) === \"undefined\") pt.Z = 0;\n        this[0] = pt[0];\n        this[1] = pt[1];\n        this.Z = pt.Z;\n      }\n    } else // public FPoint()\n    {\n      this[0] = 0;\n      this[1] = 0;\n      this.Z = 0;\n    }\n  } else // if (!ClipperLib.use_xyz)\n  {\n    if (alen === 2) // public FPoint(cInt X, cInt Y)\n    {\n      this[0] = a[0];\n      this[1] = a[1];\n    } else if (alen === 1) {\n      if (a[0] instanceof ClipperLib.FPoint) // public FPoint(FPoint dp)\n      {\n        var dp = a[0];\n        this[0] = dp[0];\n        this[1] = dp[1];\n      } else // public FPoint(FPoint pt)\n      {\n        var pt = a[0];\n        this[0] = pt[0];\n        this[1] = pt[1];\n      }\n    } else // public FPoint(FPoint pt)\n    {\n      this[0] = 0;\n      this[1] = 0;\n    }\n  }\n};\n\nClipperLib.FPoint.op_Equality = function (a, b) {\n  //return a == b;\n  return a[0] === b[0] && a[1] === b[1];\n};\n\nClipperLib.FPoint.op_Inequality = function (a, b) {\n  //return a !== b;\n  return a[0] !== b[0] || a[1] !== b[1];\n};\n\n/*\nClipperLib.FPoint.prototype.Equals = function (obj)\n{\n  if (obj === null)\n      return false;\n  if (obj instanceof ClipperLib.FPoint)\n  {\n      var a = Cast(obj, ClipperLib.FPoint);\n      return (this[0] == a[0]) && (this[1] == a[1]);\n  }\n  else\n      return false;\n};\n\n*/\n\n/**\n * @constructor\n */\nClipperLib.FPoint0 = function () {\n  this[0] = 0;\n  this[1] = 0;\n  if (ClipperLib.use_xyz)\n    this.Z = 0;\n};\n\nClipperLib.FPoint0.prototype = ClipperLib.FPoint.prototype;\n\n/**\n * @constructor\n */\nClipperLib.FPoint1 = function (pt) {\n  this[0] = pt[0];\n  this[1] = pt[1];\n  if (ClipperLib.use_xyz) {\n    if (typeof pt.Z === \"undefined\") this.Z = 0;\n    else this.Z = pt.Z;\n  }\n};\n\nClipperLib.FPoint1.prototype = ClipperLib.FPoint.prototype;\n\n/**\n * @constructor\n */\nClipperLib.FPoint1dp = function (dp) {\n  this[0] = dp[0];\n  this[1] = dp[1];\n  if (ClipperLib.use_xyz)\n    this.Z = 0;\n};\n\nClipperLib.FPoint1dp.prototype = ClipperLib.FPoint.prototype;\n\n/**\n * @constructor\n */\nClipperLib.FPoint2 = function (x, y, z) {\n  this[0] = x;\n  this[1] = y;\n  if (ClipperLib.use_xyz) {\n    if (typeof z === \"undefined\") this.Z = 0;\n    else this.Z = z;\n  }\n};\n\nClipperLib.FPoint2.prototype = ClipperLib.FPoint.prototype;\n\n/**\n * @constructor\n */\nClipperLib.FRect = function () {\n  var a = arguments,\n    alen = a.length;\n  if (alen === 4) // function (l, t, r, b)\n  {\n    this.left = a[0];\n    this.top = a[1];\n    this.right = a[2];\n    this.bottom = a[3];\n  } else if (alen === 1) // function (ir)\n  {\n    var ir = a[0];\n    this.left = ir.left;\n    this.top = ir.top;\n    this.right = ir.right;\n    this.bottom = ir.bottom;\n  } else // function ()\n  {\n    this.left = 0;\n    this.top = 0;\n    this.right = 0;\n    this.bottom = 0;\n  }\n};\n\n/**\n * @constructor\n */\nClipperLib.FRect0 = function () {\n  this.left = 0;\n  this.top = 0;\n  this.right = 0;\n  this.bottom = 0;\n};\n\nClipperLib.FRect0.prototype = ClipperLib.FRect.prototype;\n\n/**\n * @constructor\n */\nClipperLib.FRect1 = function (ir) {\n  this.left = ir.left;\n  this.top = ir.top;\n  this.right = ir.right;\n  this.bottom = ir.bottom;\n};\n\nClipperLib.FRect1.prototype = ClipperLib.FRect.prototype;\n\n/**\n * @constructor\n */\nClipperLib.FRect4 = function (l, t, r, b) {\n  this.left = l;\n  this.top = t;\n  this.right = r;\n  this.bottom = b;\n};\n\nClipperLib.FRect4.prototype = ClipperLib.FRect.prototype;\n\nClipperLib.ClipType = {\n  ctIntersection: 0,\n  ctUnion: 1,\n  ctDifference: 2,\n  ctXor: 3\n};\n\nClipperLib.PolyType = {\n  ptSubject: 0,\n  ptClip: 1\n};\n\nClipperLib.PolyFillType = {\n  pftEvenOdd: 0,\n  pftNonZero: 1,\n  pftPositive: 2,\n  pftNegative: 3\n};\n\nClipperLib.JoinType = {\n  jtSquare: 0,\n  jtRound: 1,\n  jtMiter: 2\n};\n\nClipperLib.EndType = {\n  etOpenSquare: 0,\n  etOpenRound: 1,\n  etOpenButt: 2,\n  etClosedLine: 3,\n  etClosedPolygon: 4\n};\n\nClipperLib.EdgeSide = {\n  esLeft: 0,\n  esRight: 1\n};\n\nClipperLib.Direction = {\n  dRightToLeft: 0,\n  dLeftToRight: 1\n};\n\n/**\n * @constructor\n */\nClipperLib.TEdge = function () {\n  this.Bot = new ClipperLib.FPoint0();\n  this.Curr = new ClipperLib.FPoint0(); //current (updated for every new scanbeam)\n  this.Top = new ClipperLib.FPoint0();\n  this.Delta = new ClipperLib.FPoint0();\n  this.Dx = 0;\n  this.PolyTyp = ClipperLib.PolyType.ptSubject;\n  this.Side = ClipperLib.EdgeSide.esLeft; //side only refers to current side of solution poly\n  this.WindDelta = 0; //1 or -1 depending on winding direction\n  this.WindCnt = 0;\n  this.WindCnt2 = 0; //winding count of the opposite polytype\n  this.OutIdx = 0;\n  this.Next = null;\n  this.Prev = null;\n  this.NextInLML = null;\n  this.NextInAEL = null;\n  this.PrevInAEL = null;\n  this.NextInSEL = null;\n  this.PrevInSEL = null;\n};\n\n/**\n * @constructor\n */\nClipperLib.IntersectNode = function () {\n  this.Edge1 = null;\n  this.Edge2 = null;\n  this.Pt = new ClipperLib.FPoint0();\n};\n\nClipperLib.MyIntersectNodeSort = function () {};\n\nClipperLib.MyIntersectNodeSort.Compare = function (node1, node2) {\n  var i = node2.Pt[1] - node1.Pt[1];\n  if (i > 0) return 1;\n  else if (i < 0) return -1;\n  else return 0;\n};\n\n/**\n * @constructor\n */\nClipperLib.LocalMinima = function () {\n  this[1] = 0;\n  this.LeftBound = null;\n  this.RightBound = null;\n  this.Next = null;\n};\n\n/**\n * @constructor\n */\nClipperLib.Scanbeam = function () {\n  this[1] = 0;\n  this.Next = null;\n};\n\n/**\n * @constructor\n */\nClipperLib.Maxima = function () {\n  this[0] = 0;\n  this.Next = null;\n  this.Prev = null;\n};\n\n//OutRec: contains a path in the clipping solution. Edges in the AEL will\n//carry a pointer to an OutRec when they are part of the clipping solution.\n/**\n * @constructor\n */\nClipperLib.OutRec = function () {\n  this.Idx = 0;\n  this.IsHole = false;\n  this.IsOpen = false;\n  this.FirstLeft = null; //see comments in clipper.pas\n  this.Pts = null;\n  this.BottomPt = null;\n  this.PolyNode = null;\n};\n\n/**\n * @constructor\n */\nClipperLib.OutPt = function () {\n  this.Idx = 0;\n  this.Pt = new ClipperLib.FPoint0();\n  this.Next = null;\n  this.Prev = null;\n};\n\n/**\n * @constructor\n */\nClipperLib.Join = function () {\n  this.OutPt1 = null;\n  this.OutPt2 = null;\n  this.OffPt = new ClipperLib.FPoint0();\n};\n\nClipperLib.ClipperBase = function () {\n  this.m_MinimaList = null;\n  this.m_CurrentLM = null;\n  this.m_edges = new Array();\n  this.m_HasOpenPaths = false;\n  this.PreserveCollinear = false;\n  this.m_Scanbeam = null;\n  this.m_PolyOuts = null;\n  this.m_ActiveEdges = null;\n};\n\nClipperLib.ClipperBase.horizontal = -3.4E+38;\nClipperLib.ClipperBase.Skip = -2;\nClipperLib.ClipperBase.Unassigned = -1;\nClipperLib.ClipperBase.tolerance = 1E-20;\n\n// The MAX_VALUE property has a value of 1.7976931348623157e+308. Values larger than MAX_VALUE are represented as \"Infinity\".\n//MIN_VALUE has a value of 5e-324. Values smaller than MIN_VALUE (\"underflow values\") are converted to 0.\nClipperLib.ClipperBase.maxValue = Math.sqrt(Number.MAX_VALUE); // 1.3407807929942596e+154\nClipperLib.ClipperBase.minValue = Math.sqrt(Number.MIN_VALUE); // 2.2227587494850775e-162\n\nClipperLib.ClipperBase.near_zero = function (val) {\n  return (val > -ClipperLib.ClipperBase.tolerance) && (val < ClipperLib.ClipperBase.tolerance);\n};\n\nClipperLib.ClipperBase.IsHorizontal = function (e) {\n  return e.Delta[1] === 0;\n};\n\nClipperLib.ClipperBase.prototype.PointIsVertex = function (pt, pp) {\n  var pp2 = pp;\n  do {\n    if (ClipperLib.FPoint.op_Equality(pp2.Pt, pt))\n      return true;\n    pp2 = pp2.Next;\n  }\n  while (pp2 !== pp)\n  return false;\n};\n\nClipperLib.ClipperBase.prototype.PointOnLineSegment = function (pt, linePt1, linePt2) {\n  return ((pt[0] === linePt1[0]) && (pt[1] === linePt1[1])) || ((pt[0] === linePt2[0]) && (pt[1] === linePt2[1])) || (((pt[0] > linePt1[0]) === (pt[0] < linePt2[0])) && ((pt[1] > linePt1[1]) === (pt[1] < linePt2[1])) && ((pt[0] - linePt1[0]) * (linePt2[1] - linePt1[1]) === (linePt2[0] - linePt1[0]) * (pt[1] - linePt1[1])));\n};\n\nClipperLib.ClipperBase.prototype.PointOnPolygon = function (pt, pp) {\n  var pp2 = pp;\n  while (true) {\n    if (this.PointOnLineSegment(pt, pp2.Pt, pp2.Next.Pt))\n      return true;\n    pp2 = pp2.Next;\n    if (pp2 === pp)\n      break;\n  }\n  return false;\n};\n\nClipperLib.ClipperBase.prototype.SlopesEqual = ClipperLib.ClipperBase.SlopesEqual = function () {\n  var a = arguments,\n    alen = a.length;\n  var e1, e2, pt1, pt2, pt3, pt4;\n  if (alen === 2) // function (e1, e2)\n  {\n    e1 = a[0];\n    e2 = a[1];\n    return e1.Delta[1] * e2.Delta[0] === e1.Delta[0] * e2.Delta[1];\n  } else if (alen === 3) // function (pt1, pt2, pt3)\n  {\n    pt1 = a[0];\n    pt2 = a[1];\n    pt3 = a[2];\n    return (pt1[1] - pt2[1]) * (pt2[0] - pt3[0]) - (pt1[0] - pt2[0]) * (pt2[1] - pt3[1]) === 0;\n  } else // function (pt1, pt2, pt3, pt4)\n  {\n    pt1 = a[0];\n    pt2 = a[1];\n    pt3 = a[2];\n    pt4 = a[3];\n    return (pt1[1] - pt2[1]) * (pt3[0] - pt4[0]) - (pt1[0] - pt2[0]) * (pt3[1] - pt4[1]) === 0;\n  }\n};\n\nClipperLib.ClipperBase.SlopesEqual3 = function (e1, e2) {\n  return e1.Delta[1] * e2.Delta[0] === e1.Delta[0] * e2.Delta[1];\n};\n\nClipperLib.ClipperBase.SlopesEqual4 = function (pt1, pt2, pt3) {\n  return (pt1[1] - pt2[1]) * (pt2[0] - pt3[0]) - (pt1[0] - pt2[0]) * (pt2[1] - pt3[1]) === 0;\n};\n\nClipperLib.ClipperBase.SlopesEqual5 = function (pt1, pt2, pt3, pt4) {\n  return (pt1[1] - pt2[1]) * (pt3[0] - pt4[0]) - (pt1[0] - pt2[0]) * (pt3[1] - pt4[1]) === 0;\n};\n\nClipperLib.ClipperBase.prototype.Clear = function () {\n  this.DisposeLocalMinimaList();\n  for (var i = 0, ilen = this.m_edges.length; i < ilen; ++i) {\n    for (var j = 0, jlen = this.m_edges[i].length; j < jlen; ++j)\n      this.m_edges[i][j] = null;\n    ClipperLib.Clear(this.m_edges[i]);\n  }\n  ClipperLib.Clear(this.m_edges);\n  this.m_HasOpenPaths = false;\n};\n\nClipperLib.ClipperBase.prototype.DisposeLocalMinimaList = function () {\n  while (this.m_MinimaList !== null) {\n    var tmpLm = this.m_MinimaList.Next;\n    this.m_MinimaList = null;\n    this.m_MinimaList = tmpLm;\n  }\n  this.m_CurrentLM = null;\n};\n\nClipperLib.ClipperBase.prototype.RangeTest = function (pt) {\n  if (pt[0] > ClipperLib.ClipperBase.maxValue || pt[0] < -ClipperLib.ClipperBase.maxValue ||\n    pt[1] > ClipperLib.ClipperBase.maxValue || pt[1] < -ClipperLib.ClipperBase.maxValue ||\n    (pt[0] > 0 && pt[0] < ClipperLib.ClipperBase.minValue) ||\n    (pt[1] > 0 && pt[1] < ClipperLib.ClipperBase.minValue) ||\n    (pt[0] < 0 && pt[0] > -ClipperLib.ClipperBase.minValue) ||\n    (pt[1] < 0 && pt[1] > -ClipperLib.ClipperBase.minValue))\n    ClipperLib.Error(\"Coordinate outside allowed range in RangeTest().\");\n};\n\nClipperLib.ClipperBase.prototype.InitEdge = function (e, eNext, ePrev, pt) {\n  e.Next = eNext;\n  e.Prev = ePrev;\n  //e.Curr = pt;\n  e.Curr[0] = pt[0];\n  e.Curr[1] = pt[1];\n  if (ClipperLib.use_xyz) e.Curr.Z = pt.Z;\n  e.OutIdx = -1;\n};\n\nClipperLib.ClipperBase.prototype.InitEdge2 = function (e, polyType) {\n  if (e.Curr[1] >= e.Next.Curr[1]) {\n    //e.Bot = e.Curr;\n    e.Bot[0] = e.Curr[0];\n    e.Bot[1] = e.Curr[1];\n    if (ClipperLib.use_xyz) e.Bot.Z = e.Curr.Z;\n    //e.Top = e.Next.Curr;\n    e.Top[0] = e.Next.Curr[0];\n    e.Top[1] = e.Next.Curr[1];\n    if (ClipperLib.use_xyz) e.Top.Z = e.Next.Curr.Z;\n  } else {\n    //e.Top = e.Curr;\n    e.Top[0] = e.Curr[0];\n    e.Top[1] = e.Curr[1];\n    if (ClipperLib.use_xyz) e.Top.Z = e.Curr.Z;\n    //e.Bot = e.Next.Curr;\n    e.Bot[0] = e.Next.Curr[0];\n    e.Bot[1] = e.Next.Curr[1];\n    if (ClipperLib.use_xyz) e.Bot.Z = e.Next.Curr.Z;\n  }\n  this.SetDx(e);\n  e.PolyTyp = polyType;\n};\n\nClipperLib.ClipperBase.prototype.FindNextLocMin = function (E) {\n  var E2;\n  for (;;) {\n    while (ClipperLib.FPoint.op_Inequality(E.Bot, E.Prev.Bot) || ClipperLib.FPoint.op_Equality(E.Curr, E.Top))\n      E = E.Next;\n    if (E.Dx !== ClipperLib.ClipperBase.horizontal && E.Prev.Dx !== ClipperLib.ClipperBase.horizontal)\n      break;\n    while (E.Prev.Dx === ClipperLib.ClipperBase.horizontal)\n      E = E.Prev;\n    E2 = E;\n    while (E.Dx === ClipperLib.ClipperBase.horizontal)\n      E = E.Next;\n    if (E.Top[1] === E.Prev.Bot[1])\n      continue;\n    //ie just an intermediate horz.\n    if (E2.Prev.Bot[0] < E.Bot[0])\n      E = E2;\n    break;\n  }\n  return E;\n};\n\nClipperLib.ClipperBase.prototype.ProcessBound = function (E, LeftBoundIsForward) {\n  var EStart;\n  var Result = E;\n  var Horz;\n\n  if (Result.OutIdx === ClipperLib.ClipperBase.Skip) {\n    //check if there are edges beyond the skip edge in the bound and if so\n    //create another LocMin and calling ProcessBound once more ...\n    E = Result;\n    if (LeftBoundIsForward) {\n      while (E.Top[1] === E.Next.Bot[1]) E = E.Next;\n      while (E !== Result && E.Dx === ClipperLib.ClipperBase.horizontal) E = E.Prev;\n    } else {\n      while (E.Top[1] === E.Prev.Bot[1]) E = E.Prev;\n      while (E !== Result && E.Dx === ClipperLib.ClipperBase.horizontal) E = E.Next;\n    }\n    if (E === Result) {\n      if (LeftBoundIsForward) Result = E.Next;\n      else Result = E.Prev;\n    } else {\n      //there are more edges in the bound beyond result starting with E\n      if (LeftBoundIsForward)\n        E = Result.Next;\n      else\n        E = Result.Prev;\n      var locMin = new ClipperLib.LocalMinima();\n      locMin.Next = null;\n      locMin[1] = E.Bot[1];\n      locMin.LeftBound = null;\n      locMin.RightBound = E;\n      E.WindDelta = 0;\n      Result = this.ProcessBound(E, LeftBoundIsForward);\n      this.InsertLocalMinima(locMin);\n    }\n    return Result;\n  }\n\n  if (E.Dx === ClipperLib.ClipperBase.horizontal) {\n    //We need to be careful with open paths because this may not be a\n    //true local minima (ie E may be following a skip edge).\n    //Also, consecutive horz. edges may start heading left before going right.\n    if (LeftBoundIsForward) EStart = E.Prev;\n    else EStart = E.Next;\n\n    if (EStart.Dx === ClipperLib.ClipperBase.horizontal) //ie an adjoining horizontal skip edge\n    {\n      if (EStart.Bot[0] !== E.Bot[0] && EStart.Top[0] !== E.Bot[0])\n        this.ReverseHorizontal(E);\n    } else if (EStart.Bot[0] !== E.Bot[0])\n      this.ReverseHorizontal(E);\n  }\n\n  EStart = E;\n  if (LeftBoundIsForward) {\n    while (Result.Top[1] === Result.Next.Bot[1] && Result.Next.OutIdx !== ClipperLib.ClipperBase.Skip)\n      Result = Result.Next;\n    if (Result.Dx === ClipperLib.ClipperBase.horizontal && Result.Next.OutIdx !== ClipperLib.ClipperBase.Skip) {\n      //nb: at the top of a bound, horizontals are added to the bound\n      //only when the preceding edge attaches to the horizontal's left vertex\n      //unless a Skip edge is encountered when that becomes the top divide\n      Horz = Result;\n      while (Horz.Prev.Dx === ClipperLib.ClipperBase.horizontal)\n        Horz = Horz.Prev;\n      if (Horz.Prev.Top[0] > Result.Next.Top[0])\n        Result = Horz.Prev;\n    }\n    while (E !== Result) {\n      E.NextInLML = E.Next;\n      if (E.Dx === ClipperLib.ClipperBase.horizontal && E !== EStart && E.Bot[0] !== E.Prev.Top[0])\n        this.ReverseHorizontal(E);\n      E = E.Next;\n    }\n    if (E.Dx === ClipperLib.ClipperBase.horizontal && E !== EStart && E.Bot[0] !== E.Prev.Top[0])\n      this.ReverseHorizontal(E);\n    Result = Result.Next;\n    //move to the edge just beyond current bound\n  } else {\n    while (Result.Top[1] === Result.Prev.Bot[1] && Result.Prev.OutIdx !== ClipperLib.ClipperBase.Skip)\n      Result = Result.Prev;\n    if (Result.Dx === ClipperLib.ClipperBase.horizontal && Result.Prev.OutIdx !== ClipperLib.ClipperBase.Skip) {\n      Horz = Result;\n      while (Horz.Next.Dx === ClipperLib.ClipperBase.horizontal)\n        Horz = Horz.Next;\n      if (Horz.Next.Top[0] === Result.Prev.Top[0] || Horz.Next.Top[0] > Result.Prev.Top[0]) {\n        Result = Horz.Next;\n      }\n    }\n    while (E !== Result) {\n      E.NextInLML = E.Prev;\n      if (E.Dx === ClipperLib.ClipperBase.horizontal && E !== EStart && E.Bot[0] !== E.Next.Top[0])\n        this.ReverseHorizontal(E);\n      E = E.Prev;\n    }\n    if (E.Dx === ClipperLib.ClipperBase.horizontal && E !== EStart && E.Bot[0] !== E.Next.Top[0])\n      this.ReverseHorizontal(E);\n    Result = Result.Prev;\n    //move to the edge just beyond current bound\n  }\n\n  return Result;\n};\n\nClipperLib.ClipperBase.prototype.AddPath = function (pg, polyType, Closed) {\n  if (ClipperLib.use_lines) {\n    if (!Closed && polyType === ClipperLib.PolyType.ptClip)\n      ClipperLib.Error(\"AddPath: Open paths must be subject.\");\n  } else {\n    if (!Closed)\n      ClipperLib.Error(\"AddPath: Open paths have been disabled.\");\n  }\n  var highI = pg.length - 1;\n  if (Closed)\n    while (highI > 0 && (ClipperLib.FPoint.op_Equality(pg[highI], pg[0])))\n      --highI;\n  while (highI > 0 && (ClipperLib.FPoint.op_Equality(pg[highI], pg[highI - 1])))\n    --highI;\n  if ((Closed && highI < 2) || (!Closed && highI < 1))\n    return false;\n  //create a new edge array ...\n  var edges = new Array();\n  for (var i = 0; i <= highI; i++)\n    edges.push(new ClipperLib.TEdge());\n  var IsFlat = true;\n  //1. Basic (first) edge initialization ...\n\n  //edges[1].Curr = pg[1];\n  edges[1].Curr[0] = pg[1][0];\n  edges[1].Curr[1] = pg[1][1];\n  if (ClipperLib.use_xyz) edges[1].Curr.Z = pg[1].Z;\n\n  this.RangeTest(pg[0]);\n\n  this.RangeTest(pg[highI]);\n\n  this.InitEdge(edges[0], edges[1], edges[highI], pg[0]);\n  this.InitEdge(edges[highI], edges[0], edges[highI - 1], pg[highI]);\n  for (var i = highI - 1; i >= 1; --i) {\n    this.RangeTest(pg[i]);\n\n    this.InitEdge(edges[i], edges[i + 1], edges[i - 1], pg[i]);\n  }\n\n  var eStart = edges[0];\n  //2. Remove duplicate vertices, and (when closed) collinear edges ...\n  var E = eStart,\n    eLoopStop = eStart;\n  for (;;) {\n    //console.log(E.Next, eStart);\n    //nb: allows matching start and end points when not Closed ...\n    if (E.Curr === E.Next.Curr && (Closed || E.Next !== eStart)) {\n      if (E === E.Next)\n        break;\n      if (E === eStart)\n        eStart = E.Next;\n      E = this.RemoveEdge(E);\n      eLoopStop = E;\n      continue;\n    }\n    if (E.Prev === E.Next)\n      break;\n    else if (Closed && ClipperLib.ClipperBase.SlopesEqual4(E.Prev.Curr, E.Curr, E.Next.Curr) && (!this.PreserveCollinear || !this.Pt2IsBetweenPt1AndPt3(E.Prev.Curr, E.Curr, E.Next.Curr))) {\n      //Collinear edges are allowed for open paths but in closed paths\n      //the default is to merge adjacent collinear edges into a single edge.\n      //However, if the PreserveCollinear property is enabled, only overlapping\n      //collinear edges (ie spikes) will be removed from closed paths.\n      if (E === eStart)\n        eStart = E.Next;\n      E = this.RemoveEdge(E);\n      E = E.Prev;\n      eLoopStop = E;\n      continue;\n    }\n    E = E.Next;\n    if ((E === eLoopStop) || (!Closed && E.Next === eStart)) break;\n  }\n  if ((!Closed && (E === E.Next)) || (Closed && (E.Prev === E.Next)))\n    return false;\n  if (!Closed) {\n    this.m_HasOpenPaths = true;\n    eStart.Prev.OutIdx = ClipperLib.ClipperBase.Skip;\n  }\n  //3. Do second stage of edge initialization ...\n  E = eStart;\n  do {\n    this.InitEdge2(E, polyType);\n    E = E.Next;\n    if (IsFlat && E.Curr[1] !== eStart.Curr[1])\n      IsFlat = false;\n  }\n  while (E !== eStart)\n  //4. Finally, add edge bounds to LocalMinima list ...\n  //Totally flat paths must be handled differently when adding them\n  //to LocalMinima list to avoid endless loops etc ...\n  if (IsFlat) {\n    if (Closed)\n      return false;\n\n    E.Prev.OutIdx = ClipperLib.ClipperBase.Skip;\n\n    var locMin = new ClipperLib.LocalMinima();\n    locMin.Next = null;\n    locMin[1] = E.Bot[1];\n    locMin.LeftBound = null;\n    locMin.RightBound = E;\n    locMin.RightBound.Side = ClipperLib.EdgeSide.esRight;\n    locMin.RightBound.WindDelta = 0;\n\n    for (;;) {\n      if (E.Bot[0] !== E.Prev.Top[0]) this.ReverseHorizontal(E);\n      if (E.Next.OutIdx === ClipperLib.ClipperBase.Skip) break;\n      E.NextInLML = E.Next;\n      E = E.Next;\n    }\n    this.InsertLocalMinima(locMin);\n    this.m_edges.push(edges);\n    return true;\n  }\n  this.m_edges.push(edges);\n  var leftBoundIsForward;\n  var EMin = null;\n\n  //workaround to avoid an endless loop in the while loop below when\n  //open paths have matching start and end points ...\n  if (ClipperLib.FPoint.op_Equality(E.Prev.Bot, E.Prev.Top))\n    E = E.Next;\n\n  for (;;) {\n    E = this.FindNextLocMin(E);\n    if (E === EMin)\n      break;\n    else if (EMin === null)\n      EMin = E;\n    //E and E.Prev now share a local minima (left aligned if horizontal).\n    //Compare their slopes to find which starts which bound ...\n    var locMin = new ClipperLib.LocalMinima();\n    locMin.Next = null;\n    locMin[1] = E.Bot[1];\n    if (E.Dx < E.Prev.Dx) {\n      locMin.LeftBound = E.Prev;\n      locMin.RightBound = E;\n      leftBoundIsForward = false;\n      //Q.nextInLML = Q.prev\n    } else {\n      locMin.LeftBound = E;\n      locMin.RightBound = E.Prev;\n      leftBoundIsForward = true;\n      //Q.nextInLML = Q.next\n    }\n    locMin.LeftBound.Side = ClipperLib.EdgeSide.esLeft;\n    locMin.RightBound.Side = ClipperLib.EdgeSide.esRight;\n    if (!Closed)\n      locMin.LeftBound.WindDelta = 0;\n    else if (locMin.LeftBound.Next === locMin.RightBound)\n      locMin.LeftBound.WindDelta = -1;\n    else\n      locMin.LeftBound.WindDelta = 1;\n    locMin.RightBound.WindDelta = -locMin.LeftBound.WindDelta;\n    E = this.ProcessBound(locMin.LeftBound, leftBoundIsForward);\n    if (E.OutIdx === ClipperLib.ClipperBase.Skip)\n      E = this.ProcessBound(E, leftBoundIsForward);\n    var E2 = this.ProcessBound(locMin.RightBound, !leftBoundIsForward);\n    if (E2.OutIdx === ClipperLib.ClipperBase.Skip) E2 = this.ProcessBound(E2, !leftBoundIsForward);\n    if (locMin.LeftBound.OutIdx === ClipperLib.ClipperBase.Skip)\n      locMin.LeftBound = null;\n    else if (locMin.RightBound.OutIdx === ClipperLib.ClipperBase.Skip)\n      locMin.RightBound = null;\n    this.InsertLocalMinima(locMin);\n    if (!leftBoundIsForward)\n      E = E2;\n  }\n  return true;\n};\n\nClipperLib.ClipperBase.prototype.AddPaths = function (ppg, polyType, closed) {\n  //  console.log(\"-------------------------------------------\");\n  //  console.log(JSON.stringify(ppg));\n  var result = false;\n  for (var i = 0, ilen = ppg.length; i < ilen; ++i)\n    if (this.AddPath(ppg[i], polyType, closed))\n      result = true;\n  return result;\n};\n\nClipperLib.ClipperBase.prototype.Pt2IsBetweenPt1AndPt3 = function (pt1, pt2, pt3) {\n  if ((ClipperLib.FPoint.op_Equality(pt1, pt3)) || (ClipperLib.FPoint.op_Equality(pt1, pt2)) || (ClipperLib.FPoint.op_Equality(pt3, pt2)))\n\n    //if ((pt1 == pt3) || (pt1 == pt2) || (pt3 == pt2))\n    return false;\n\n  else if (pt1[0] !== pt3[0])\n    return (pt2[0] > pt1[0]) === (pt2[0] < pt3[0]);\n  else\n    return (pt2[1] > pt1[1]) === (pt2[1] < pt3[1]);\n};\n\nClipperLib.ClipperBase.prototype.RemoveEdge = function (e) {\n  //removes e from double_linked_list (but without removing from memory)\n  e.Prev.Next = e.Next;\n  e.Next.Prev = e.Prev;\n  var result = e.Next;\n  e.Prev = null; //flag as removed (see ClipperBase.Clear)\n  return result;\n};\n\nClipperLib.ClipperBase.prototype.SetDx = function (e) {\n  e.Delta[0] = (e.Top[0] - e.Bot[0]);\n  e.Delta[1] = (e.Top[1] - e.Bot[1]);\n  if (e.Delta[1] === 0) e.Dx = ClipperLib.ClipperBase.horizontal;\n  else e.Dx = (e.Delta[0]) / (e.Delta[1]);\n};\n\nClipperLib.ClipperBase.prototype.InsertLocalMinima = function (newLm) {\n  if (this.m_MinimaList === null) {\n    this.m_MinimaList = newLm;\n  } else if (newLm[1] >= this.m_MinimaList[1]) {\n    newLm.Next = this.m_MinimaList;\n    this.m_MinimaList = newLm;\n  } else {\n    var tmpLm = this.m_MinimaList;\n    while (tmpLm.Next !== null && (newLm[1] < tmpLm.Next[1]))\n      tmpLm = tmpLm.Next;\n    newLm.Next = tmpLm.Next;\n    tmpLm.Next = newLm;\n  }\n};\n\nClipperLib.ClipperBase.prototype.PopLocalMinima = function (Y, current) {\n  current.v = this.m_CurrentLM;\n  if (this.m_CurrentLM !== null && this.m_CurrentLM[1] === Y) {\n    this.m_CurrentLM = this.m_CurrentLM.Next;\n    return true;\n  }\n  return false;\n};\n\nClipperLib.ClipperBase.prototype.ReverseHorizontal = function (e) {\n  //swap horizontal edges' top and bottom x's so they follow the natural\n  //progression of the bounds - ie so their xbots will align with the\n  //adjoining lower edge. [Helpful in the ProcessHorizontal() method.]\n  var tmp = e.Top[0];\n  e.Top[0] = e.Bot[0];\n  e.Bot[0] = tmp;\n  if (ClipperLib.use_xyz) {\n    tmp = e.Top.Z;\n    e.Top.Z = e.Bot.Z;\n    e.Bot.Z = tmp;\n  }\n};\n\nClipperLib.ClipperBase.prototype.Reset = function () {\n  this.m_CurrentLM = this.m_MinimaList;\n  if (this.m_CurrentLM === null) //ie nothing to process\n    return;\n  //reset all edges ...\n  this.m_Scanbeam = null;\n  var lm = this.m_MinimaList;\n  while (lm !== null) {\n    this.InsertScanbeam(lm[1]);\n    var e = lm.LeftBound;\n    if (e !== null) {\n      //e.Curr = e.Bot;\n      e.Curr[0] = e.Bot[0];\n      e.Curr[1] = e.Bot[1];\n      if (ClipperLib.use_xyz) e.Curr.Z = e.Bot.Z;\n      e.OutIdx = ClipperLib.ClipperBase.Unassigned;\n    }\n    e = lm.RightBound;\n    if (e !== null) {\n      //e.Curr = e.Bot;\n      e.Curr[0] = e.Bot[0];\n      e.Curr[1] = e.Bot[1];\n      if (ClipperLib.use_xyz) e.Curr.Z = e.Bot.Z;\n      e.OutIdx = ClipperLib.ClipperBase.Unassigned;\n    }\n    lm = lm.Next;\n  }\n  this.m_ActiveEdges = null;\n};\n\nClipperLib.ClipperBase.prototype.InsertScanbeam = function (Y) {\n  //single-linked list: sorted descending, ignoring dups.\n  if (this.m_Scanbeam === null) {\n    this.m_Scanbeam = new ClipperLib.Scanbeam();\n    this.m_Scanbeam.Next = null;\n    this.m_Scanbeam[1] = Y;\n  } else if (Y > this.m_Scanbeam[1]) {\n    var newSb = new ClipperLib.Scanbeam();\n    newSb[1] = Y;\n    newSb.Next = this.m_Scanbeam;\n    this.m_Scanbeam = newSb;\n  } else {\n    var sb2 = this.m_Scanbeam;\n    while (sb2.Next !== null && Y <= sb2.Next[1]) {\n      sb2 = sb2.Next;\n    }\n    if (Y === sb2[1]) {\n      return;\n    } //ie ignores duplicates\n    var newSb1 = new ClipperLib.Scanbeam();\n    newSb1[1] = Y;\n    newSb1.Next = sb2.Next;\n    sb2.Next = newSb1;\n  }\n};\n\nClipperLib.ClipperBase.prototype.PopScanbeam = function (Y) {\n  if (this.m_Scanbeam === null) {\n    Y.v = 0;\n    return false;\n  }\n  Y.v = this.m_Scanbeam[1];\n  this.m_Scanbeam = this.m_Scanbeam.Next;\n  return true;\n};\n\nClipperLib.ClipperBase.prototype.LocalMinimaPending = function () {\n  return (this.m_CurrentLM !== null);\n};\n\nClipperLib.ClipperBase.prototype.CreateOutRec = function () {\n  var result = new ClipperLib.OutRec();\n  result.Idx = ClipperLib.ClipperBase.Unassigned;\n  result.IsHole = false;\n  result.IsOpen = false;\n  result.FirstLeft = null;\n  result.Pts = null;\n  result.BottomPt = null;\n  result.PolyNode = null;\n  this.m_PolyOuts.push(result);\n  result.Idx = this.m_PolyOuts.length - 1;\n  return result;\n};\n\nClipperLib.ClipperBase.prototype.DisposeOutRec = function (index) {\n  var outRec = this.m_PolyOuts[index];\n  outRec.Pts = null;\n  outRec = null;\n  this.m_PolyOuts[index] = null;\n};\n\nClipperLib.ClipperBase.prototype.UpdateEdgeIntoAEL = function (e) {\n  if (e.NextInLML === null) {\n    ClipperLib.Error(\"UpdateEdgeIntoAEL: invalid call\");\n  }\n  var AelPrev = e.PrevInAEL;\n  var AelNext = e.NextInAEL;\n  e.NextInLML.OutIdx = e.OutIdx;\n  if (AelPrev !== null) {\n    AelPrev.NextInAEL = e.NextInLML;\n  } else {\n    this.m_ActiveEdges = e.NextInLML;\n  }\n  if (AelNext !== null) {\n    AelNext.PrevInAEL = e.NextInLML;\n  }\n  e.NextInLML.Side = e.Side;\n  e.NextInLML.WindDelta = e.WindDelta;\n  e.NextInLML.WindCnt = e.WindCnt;\n  e.NextInLML.WindCnt2 = e.WindCnt2;\n  e = e.NextInLML;\n  e.Curr[0] = e.Bot[0];\n  e.Curr[1] = e.Bot[1];\n  e.PrevInAEL = AelPrev;\n  e.NextInAEL = AelNext;\n  if (!ClipperLib.ClipperBase.IsHorizontal(e)) {\n    this.InsertScanbeam(e.Top[1]);\n  }\n  return e;\n};\n\nClipperLib.ClipperBase.prototype.SwapPositionsInAEL = function (edge1, edge2) {\n  //check that one or other edge hasn't already been removed from AEL ...\n  if (edge1.NextInAEL === edge1.PrevInAEL || edge2.NextInAEL === edge2.PrevInAEL) {\n    return;\n  }\n\n  if (edge1.NextInAEL === edge2) {\n    var next = edge2.NextInAEL;\n    if (next !== null) {\n      next.PrevInAEL = edge1;\n    }\n    var prev = edge1.PrevInAEL;\n    if (prev !== null) {\n      prev.NextInAEL = edge2;\n    }\n    edge2.PrevInAEL = prev;\n    edge2.NextInAEL = edge1;\n    edge1.PrevInAEL = edge2;\n    edge1.NextInAEL = next;\n  } else if (edge2.NextInAEL === edge1) {\n    var next1 = edge1.NextInAEL;\n    if (next1 !== null) {\n      next1.PrevInAEL = edge2;\n    }\n    var prev1 = edge2.PrevInAEL;\n    if (prev1 !== null) {\n      prev1.NextInAEL = edge1;\n    }\n    edge1.PrevInAEL = prev1;\n    edge1.NextInAEL = edge2;\n    edge2.PrevInAEL = edge1;\n    edge2.NextInAEL = next1;\n  } else {\n    var next2 = edge1.NextInAEL;\n    var prev2 = edge1.PrevInAEL;\n    edge1.NextInAEL = edge2.NextInAEL;\n    if (edge1.NextInAEL !== null) {\n      edge1.NextInAEL.PrevInAEL = edge1;\n    }\n    edge1.PrevInAEL = edge2.PrevInAEL;\n    if (edge1.PrevInAEL !== null) {\n      edge1.PrevInAEL.NextInAEL = edge1;\n    }\n    edge2.NextInAEL = next2;\n    if (edge2.NextInAEL !== null) {\n      edge2.NextInAEL.PrevInAEL = edge2;\n    }\n    edge2.PrevInAEL = prev2;\n    if (edge2.PrevInAEL !== null) {\n      edge2.PrevInAEL.NextInAEL = edge2;\n    }\n  }\n\n  if (edge1.PrevInAEL === null) {\n    this.m_ActiveEdges = edge1;\n  } else {\n    if (edge2.PrevInAEL === null) {\n      this.m_ActiveEdges = edge2;\n    }\n  }\n};\n\nClipperLib.ClipperBase.prototype.DeleteFromAEL = function (e) {\n  var AelPrev = e.PrevInAEL;\n  var AelNext = e.NextInAEL;\n  if (AelPrev === null && AelNext === null && e !== this.m_ActiveEdges) {\n    return;\n  } //already deleted\n  if (AelPrev !== null) {\n    AelPrev.NextInAEL = AelNext;\n  } else {\n    this.m_ActiveEdges = AelNext;\n  }\n  if (AelNext !== null) {\n    AelNext.PrevInAEL = AelPrev;\n  }\n  e.NextInAEL = null;\n  e.PrevInAEL = null;\n}\n\n// public Clipper(int InitOptions = 0)\n/**\n * @suppress {missingProperties}\n */\nClipperLib.Clipper = function (InitOptions) {\n  if (typeof (InitOptions) === \"undefined\") InitOptions = 0;\n  this.m_PolyOuts = null;\n  this.m_ClipType = ClipperLib.ClipType.ctIntersection;\n  this.m_Scanbeam = null;\n  this.m_Maxima = null;\n  this.m_ActiveEdges = null;\n  this.m_SortedEdges = null;\n  this.m_IntersectList = null;\n  this.m_IntersectNodeComparer = null;\n  this.m_ExecuteLocked = false;\n  this.m_ClipFillType = ClipperLib.PolyFillType.pftEvenOdd;\n  this.m_SubjFillType = ClipperLib.PolyFillType.pftEvenOdd;\n  this.m_Joins = null;\n  this.m_GhostJoins = null;\n  this.m_UsingPolyTree = false;\n  this.ReverseSolution = false;\n  this.StrictlySimple = false;\n\n  ClipperLib.ClipperBase.call(this);\n\n  this.m_Scanbeam = null;\n  this.m_Maxima = null;\n  this.m_ActiveEdges = null;\n  this.m_SortedEdges = null;\n  this.m_IntersectList = new Array();\n  this.m_IntersectNodeComparer = ClipperLib.MyIntersectNodeSort.Compare;\n  this.m_ExecuteLocked = false;\n  this.m_UsingPolyTree = false;\n  this.m_PolyOuts = new Array();\n  this.m_Joins = new Array();\n  this.m_GhostJoins = new Array();\n  this.ReverseSolution = (1 & InitOptions) !== 0;\n  this.StrictlySimple = (2 & InitOptions) !== 0;\n  this.PreserveCollinear = (4 & InitOptions) !== 0;\n  if (ClipperLib.use_xyz) {\n    this.ZFillFunction = null; // function (FPoint bot1, FPoint top1, FPoint bot2, FPoint top2, ref FPoint intersectPt);\n  }\n};\n\nClipperLib.Clipper.ioReverseSolution = 1;\nClipperLib.Clipper.ioStrictlySimple = 2;\nClipperLib.Clipper.ioPreserveCollinear = 4;\n\nClipperLib.Clipper.prototype.Clear = function () {\n  if (this.m_edges.length === 0)\n    return;\n  //avoids problems with ClipperBase destructor\n  this.DisposeAllPolyPts();\n  ClipperLib.ClipperBase.prototype.Clear.call(this);\n};\n\nClipperLib.Clipper.prototype.InsertMaxima = function (X) {\n  //double-linked list: sorted ascending, ignoring dups.\n  var newMax = new ClipperLib.Maxima();\n  newMax[0] = X;\n  if (this.m_Maxima === null) {\n    this.m_Maxima = newMax;\n    this.m_Maxima.Next = null;\n    this.m_Maxima.Prev = null;\n  } else if (X < this.m_Maxima[0]) {\n    newMax.Next = this.m_Maxima;\n    newMax.Prev = null;\n    this.m_Maxima = newMax;\n  } else {\n    var m = this.m_Maxima;\n    while (m.Next !== null && X >= m.Next[0]) {\n      m = m.Next;\n    }\n    if (X === m[0]) {\n      return;\n    } //ie ignores duplicates (& CG to clean up newMax)\n    //insert newMax between m and m.Next ...\n    newMax.Next = m.Next;\n    newMax.Prev = m;\n    if (m.Next !== null) {\n      m.Next.Prev = newMax;\n    }\n    m.Next = newMax;\n  }\n};\n\n// ************************************\nClipperLib.Clipper.prototype.Execute = function () {\n  var a = arguments,\n    alen = a.length,\n    ispolytree = a[1] instanceof ClipperLib.PolyTree;\n  if (alen === 4 && !ispolytree) // function (clipType, solution, subjFillType, clipFillType)\n  {\n    var clipType = a[0],\n      solution = a[1],\n      subjFillType = a[2],\n      clipFillType = a[3];\n    if (this.m_ExecuteLocked)\n      return false;\n    if (this.m_HasOpenPaths)\n      ClipperLib.Error(\"Error: PolyTree struct is needed for open path clipping.\");\n    this.m_ExecuteLocked = true;\n    ClipperLib.Clear(solution);\n    this.m_SubjFillType = subjFillType;\n    this.m_ClipFillType = clipFillType;\n    this.m_ClipType = clipType;\n    this.m_UsingPolyTree = false;\n    try {\n      var succeeded = this.ExecuteInternal();\n      //build the return polygons ...\n      if (succeeded) this.BuildResult(solution);\n    } finally {\n      this.DisposeAllPolyPts();\n      this.m_ExecuteLocked = false;\n    }\n    return succeeded;\n  } else if (alen === 4 && ispolytree) // function (clipType, polytree, subjFillType, clipFillType)\n  {\n    var clipType = a[0],\n      polytree = a[1],\n      subjFillType = a[2],\n      clipFillType = a[3];\n    if (this.m_ExecuteLocked)\n      return false;\n    this.m_ExecuteLocked = true;\n    this.m_SubjFillType = subjFillType;\n    this.m_ClipFillType = clipFillType;\n    this.m_ClipType = clipType;\n    this.m_UsingPolyTree = true;\n    try {\n      var succeeded = this.ExecuteInternal();\n      //build the return polygons ...\n      if (succeeded) this.BuildResult2(polytree);\n    } finally {\n      this.DisposeAllPolyPts();\n      this.m_ExecuteLocked = false;\n    }\n    return succeeded;\n  } else if (alen === 2 && !ispolytree) // function (clipType, solution)\n  {\n    var clipType = a[0],\n      solution = a[1];\n    return this.Execute(clipType, solution, ClipperLib.PolyFillType.pftEvenOdd, ClipperLib.PolyFillType.pftEvenOdd);\n  } else if (alen === 2 && ispolytree) // function (clipType, polytree)\n  {\n    var clipType = a[0],\n      polytree = a[1];\n    return this.Execute(clipType, polytree, ClipperLib.PolyFillType.pftEvenOdd, ClipperLib.PolyFillType.pftEvenOdd);\n  }\n};\n\nClipperLib.Clipper.prototype.FixHoleLinkage = function (outRec) {\n  //skip if an outermost polygon or\n  //already already points to the correct FirstLeft ...\n  if (outRec.FirstLeft === null || (outRec.IsHole !== outRec.FirstLeft.IsHole && outRec.FirstLeft.Pts !== null))\n    return;\n  var orfl = outRec.FirstLeft;\n  while (orfl !== null && ((orfl.IsHole === outRec.IsHole) || orfl.Pts === null))\n    orfl = orfl.FirstLeft;\n  outRec.FirstLeft = orfl;\n};\n\nClipperLib.Clipper.prototype.ExecuteInternal = function () {\n  try {\n    this.Reset();\n    this.m_SortedEdges = null;\n    this.m_Maxima = null;\n\n    var botY = {},\n      topY = {};\n\n    if (!this.PopScanbeam(botY)) {\n      return false;\n    }\n    this.InsertLocalMinimaIntoAEL(botY.v);\n    while (this.PopScanbeam(topY) || this.LocalMinimaPending()) {\n      this.ProcessHorizontals();\n      this.m_GhostJoins.length = 0;\n      if (!this.ProcessIntersections(topY.v)) {\n        return false;\n      }\n      this.ProcessEdgesAtTopOfScanbeam(topY.v);\n      botY.v = topY.v;\n      this.InsertLocalMinimaIntoAEL(botY.v);\n    }\n\n    //fix orientations ...\n    var outRec, i, ilen;\n    //fix orientations ...\n    for (i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++) {\n      outRec = this.m_PolyOuts[i];\n      if (outRec.Pts === null || outRec.IsOpen) continue;\n      if ((outRec.IsHole ^ this.ReverseSolution) == (this.Area$1(outRec) > 0))\n        this.ReversePolyPtLinks(outRec.Pts);\n    }\n\n    this.JoinCommonEdges();\n\n    for (i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++) {\n      outRec = this.m_PolyOuts[i];\n      if (outRec.Pts === null)\n        continue;\n      else if (outRec.IsOpen)\n        this.FixupOutPolyline(outRec);\n      else\n        this.FixupOutPolygon(outRec);\n    }\n\n    if (this.StrictlySimple) this.DoSimplePolygons();\n    return true;\n  }\n  //catch { return false; }\n  finally {\n    this.m_Joins.length = 0;\n    this.m_GhostJoins.length = 0;\n  }\n};\n\nClipperLib.Clipper.prototype.DisposeAllPolyPts = function () {\n  for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; ++i)\n    this.DisposeOutRec(i);\n  ClipperLib.Clear(this.m_PolyOuts);\n};\n\nClipperLib.Clipper.prototype.AddJoin = function (Op1, Op2, OffPt) {\n  var j = new ClipperLib.Join();\n  j.OutPt1 = Op1;\n  j.OutPt2 = Op2;\n  //j.OffPt = OffPt;\n  j.OffPt[0] = OffPt[0];\n  j.OffPt[1] = OffPt[1];\n  if (ClipperLib.use_xyz) j.OffPt.Z = OffPt.Z;\n  this.m_Joins.push(j);\n};\n\nClipperLib.Clipper.prototype.AddGhostJoin = function (Op, OffPt) {\n  var j = new ClipperLib.Join();\n  j.OutPt1 = Op;\n  //j.OffPt = OffPt;\n  j.OffPt[0] = OffPt[0];\n  j.OffPt[1] = OffPt[1];\n  if (ClipperLib.use_xyz) j.OffPt.Z = OffPt.Z;\n  this.m_GhostJoins.push(j);\n};\n\n//if (ClipperLib.use_xyz)\n//{\nClipperLib.Clipper.prototype.SetZ = function (pt, e1, e2) {\n  if (this.ZFillFunction !== null) {\n    if (pt.Z !== 0 || this.ZFillFunction === null) return;\n    else if (ClipperLib.FPoint.op_Equality(pt, e1.Bot)) pt.Z = e1.Bot.Z;\n    else if (ClipperLib.FPoint.op_Equality(pt, e1.Top)) pt.Z = e1.Top.Z;\n    else if (ClipperLib.FPoint.op_Equality(pt, e2.Bot)) pt.Z = e2.Bot.Z;\n    else if (ClipperLib.FPoint.op_Equality(pt, e2.Top)) pt.Z = e2.Top.Z;\n    else this.ZFillFunction(e1.Bot, e1.Top, e2.Bot, e2.Top, pt);\n  }\n};\n//}\n\nClipperLib.Clipper.prototype.InsertLocalMinimaIntoAEL = function (botY) {\n  var lm = {};\n\n  var lb;\n  var rb;\n  while (this.PopLocalMinima(botY, lm)) {\n    lb = lm.v.LeftBound;\n    rb = lm.v.RightBound;\n\n    var Op1 = null;\n    if (lb === null) {\n      this.InsertEdgeIntoAEL(rb, null);\n      this.SetWindingCount(rb);\n      if (this.IsContributing(rb))\n        Op1 = this.AddOutPt(rb, rb.Bot);\n    } else if (rb === null) {\n      this.InsertEdgeIntoAEL(lb, null);\n      this.SetWindingCount(lb);\n      if (this.IsContributing(lb))\n        Op1 = this.AddOutPt(lb, lb.Bot);\n      this.InsertScanbeam(lb.Top[1]);\n    } else {\n      this.InsertEdgeIntoAEL(lb, null);\n      this.InsertEdgeIntoAEL(rb, lb);\n      this.SetWindingCount(lb);\n      rb.WindCnt = lb.WindCnt;\n      rb.WindCnt2 = lb.WindCnt2;\n      if (this.IsContributing(lb))\n        Op1 = this.AddLocalMinPoly(lb, rb, lb.Bot);\n      this.InsertScanbeam(lb.Top[1]);\n    }\n    if (rb !== null) {\n      if (ClipperLib.ClipperBase.IsHorizontal(rb)) {\n        if (rb.NextInLML !== null) {\n          this.InsertScanbeam(rb.NextInLML.Top[1]);\n        }\n        this.AddEdgeToSEL(rb);\n      } else {\n        this.InsertScanbeam(rb.Top[1]);\n      }\n    }\n    if (lb === null || rb === null) continue;\n    //if output polygons share an Edge with a horizontal rb, they'll need joining later ...\n    if (Op1 !== null && ClipperLib.ClipperBase.IsHorizontal(rb) && this.m_GhostJoins.length > 0 && rb.WindDelta !== 0) {\n      for (var i = 0, ilen = this.m_GhostJoins.length; i < ilen; i++) {\n        //if the horizontal Rb and a 'ghost' horizontal overlap, then convert\n        //the 'ghost' join to a real join ready for later ...\n        var j = this.m_GhostJoins[i];\n\n        if (this.HorzSegmentsOverlap(j.OutPt1.Pt[0], j.OffPt[0], rb.Bot[0], rb.Top[0]))\n          this.AddJoin(j.OutPt1, Op1, j.OffPt);\n      }\n    }\n\n    if (lb.OutIdx >= 0 && lb.PrevInAEL !== null &&\n      lb.PrevInAEL.Curr[0] === lb.Bot[0] &&\n      lb.PrevInAEL.OutIdx >= 0 &&\n      ClipperLib.ClipperBase.SlopesEqual5(lb.PrevInAEL.Curr, lb.PrevInAEL.Top, lb.Curr, lb.Top) &&\n      lb.WindDelta !== 0 && lb.PrevInAEL.WindDelta !== 0) {\n      var Op2 = this.AddOutPt(lb.PrevInAEL, lb.Bot);\n      this.AddJoin(Op1, Op2, lb.Top);\n    }\n    if (lb.NextInAEL !== rb) {\n      if (rb.OutIdx >= 0 && rb.PrevInAEL.OutIdx >= 0 &&\n        ClipperLib.ClipperBase.SlopesEqual5(rb.PrevInAEL.Curr, rb.PrevInAEL.Top, rb.Curr, rb.Top) &&\n        rb.WindDelta !== 0 && rb.PrevInAEL.WindDelta !== 0) {\n        var Op2 = this.AddOutPt(rb.PrevInAEL, rb.Bot);\n        this.AddJoin(Op1, Op2, rb.Top);\n      }\n      var e = lb.NextInAEL;\n      if (e !== null)\n        while (e !== rb) {\n          //nb: For calculating winding counts etc, IntersectEdges() assumes\n          //that param1 will be to the right of param2 ABOVE the intersection ...\n          this.IntersectEdges(rb, e, lb.Curr);\n          //order important here\n          e = e.NextInAEL;\n        }\n    }\n  }\n};\n\nClipperLib.Clipper.prototype.InsertEdgeIntoAEL = function (edge, startEdge) {\n  if (this.m_ActiveEdges === null) {\n    edge.PrevInAEL = null;\n    edge.NextInAEL = null;\n    this.m_ActiveEdges = edge;\n  } else if (startEdge === null && this.E2InsertsBeforeE1(this.m_ActiveEdges, edge)) {\n    edge.PrevInAEL = null;\n    edge.NextInAEL = this.m_ActiveEdges;\n    this.m_ActiveEdges.PrevInAEL = edge;\n    this.m_ActiveEdges = edge;\n  } else {\n    if (startEdge === null)\n      startEdge = this.m_ActiveEdges;\n    while (startEdge.NextInAEL !== null && !this.E2InsertsBeforeE1(startEdge.NextInAEL, edge))\n      startEdge = startEdge.NextInAEL;\n    edge.NextInAEL = startEdge.NextInAEL;\n    if (startEdge.NextInAEL !== null)\n      startEdge.NextInAEL.PrevInAEL = edge;\n    edge.PrevInAEL = startEdge;\n    startEdge.NextInAEL = edge;\n  }\n};\n\nClipperLib.Clipper.prototype.E2InsertsBeforeE1 = function (e1, e2) {\n  if (e2.Curr[0] === e1.Curr[0]) {\n    if (e2.Top[1] > e1.Top[1])\n      return e2.Top[0] < ClipperLib.Clipper.TopX(e1, e2.Top[1]);\n    else\n      return e1.Top[0] > ClipperLib.Clipper.TopX(e2, e1.Top[1]);\n  } else\n    return e2.Curr[0] < e1.Curr[0];\n};\n\nClipperLib.Clipper.prototype.IsEvenOddFillType = function (edge) {\n  if (edge.PolyTyp === ClipperLib.PolyType.ptSubject)\n    return this.m_SubjFillType === ClipperLib.PolyFillType.pftEvenOdd;\n  else\n    return this.m_ClipFillType === ClipperLib.PolyFillType.pftEvenOdd;\n};\n\nClipperLib.Clipper.prototype.IsEvenOddAltFillType = function (edge) {\n  if (edge.PolyTyp === ClipperLib.PolyType.ptSubject)\n    return this.m_ClipFillType === ClipperLib.PolyFillType.pftEvenOdd;\n  else\n    return this.m_SubjFillType === ClipperLib.PolyFillType.pftEvenOdd;\n};\n\nClipperLib.Clipper.prototype.IsContributing = function (edge) {\n  var pft, pft2;\n  if (edge.PolyTyp === ClipperLib.PolyType.ptSubject) {\n    pft = this.m_SubjFillType;\n    pft2 = this.m_ClipFillType;\n  } else {\n    pft = this.m_ClipFillType;\n    pft2 = this.m_SubjFillType;\n  }\n  switch (pft) {\n    case ClipperLib.PolyFillType.pftEvenOdd:\n      if (edge.WindDelta === 0 && edge.WindCnt !== 1)\n        return false;\n      break;\n    case ClipperLib.PolyFillType.pftNonZero:\n      if (Math.abs(edge.WindCnt) !== 1)\n        return false;\n      break;\n    case ClipperLib.PolyFillType.pftPositive:\n      if (edge.WindCnt !== 1)\n        return false;\n      break;\n    default:\n      if (edge.WindCnt !== -1)\n        return false;\n      break;\n  }\n  switch (this.m_ClipType) {\n    case ClipperLib.ClipType.ctIntersection:\n      switch (pft2) {\n        case ClipperLib.PolyFillType.pftEvenOdd:\n        case ClipperLib.PolyFillType.pftNonZero:\n          return (edge.WindCnt2 !== 0);\n        case ClipperLib.PolyFillType.pftPositive:\n          return (edge.WindCnt2 > 0);\n        default:\n          return (edge.WindCnt2 < 0);\n      }\n    case ClipperLib.ClipType.ctUnion:\n      switch (pft2) {\n        case ClipperLib.PolyFillType.pftEvenOdd:\n        case ClipperLib.PolyFillType.pftNonZero:\n          return (edge.WindCnt2 === 0);\n        case ClipperLib.PolyFillType.pftPositive:\n          return (edge.WindCnt2 <= 0);\n        default:\n          return (edge.WindCnt2 >= 0);\n      }\n    case ClipperLib.ClipType.ctDifference:\n      if (edge.PolyTyp === ClipperLib.PolyType.ptSubject)\n        switch (pft2) {\n          case ClipperLib.PolyFillType.pftEvenOdd:\n          case ClipperLib.PolyFillType.pftNonZero:\n            return (edge.WindCnt2 === 0);\n          case ClipperLib.PolyFillType.pftPositive:\n            return (edge.WindCnt2 <= 0);\n          default:\n            return (edge.WindCnt2 >= 0);\n        }\n      else\n        switch (pft2) {\n          case ClipperLib.PolyFillType.pftEvenOdd:\n          case ClipperLib.PolyFillType.pftNonZero:\n            return (edge.WindCnt2 !== 0);\n          case ClipperLib.PolyFillType.pftPositive:\n            return (edge.WindCnt2 > 0);\n          default:\n            return (edge.WindCnt2 < 0);\n        }\n    case ClipperLib.ClipType.ctXor:\n      if (edge.WindDelta === 0)\n        switch (pft2) {\n          case ClipperLib.PolyFillType.pftEvenOdd:\n          case ClipperLib.PolyFillType.pftNonZero:\n            return (edge.WindCnt2 === 0);\n          case ClipperLib.PolyFillType.pftPositive:\n            return (edge.WindCnt2 <= 0);\n          default:\n            return (edge.WindCnt2 >= 0);\n        }\n      else\n        return true;\n  }\n  return true;\n};\n\nClipperLib.Clipper.prototype.SetWindingCount = function (edge) {\n  var e = edge.PrevInAEL;\n  //find the edge of the same polytype that immediately preceeds 'edge' in AEL\n  while (e !== null && ((e.PolyTyp !== edge.PolyTyp) || (e.WindDelta === 0)))\n    e = e.PrevInAEL;\n  if (e === null) {\n    var pft = (edge.PolyTyp === ClipperLib.PolyType.ptSubject ? this.m_SubjFillType : this.m_ClipFillType);\n    if (edge.WindDelta === 0) {\n      edge.WindCnt = (pft === ClipperLib.PolyFillType.pftNegative ? -1 : 1);\n    } else {\n      edge.WindCnt = edge.WindDelta;\n    }\n    edge.WindCnt2 = 0;\n    e = this.m_ActiveEdges;\n    //ie get ready to calc WindCnt2\n  } else if (edge.WindDelta === 0 && this.m_ClipType !== ClipperLib.ClipType.ctUnion) {\n    edge.WindCnt = 1;\n    edge.WindCnt2 = e.WindCnt2;\n    e = e.NextInAEL;\n    //ie get ready to calc WindCnt2\n  } else if (this.IsEvenOddFillType(edge)) {\n    //EvenOdd filling ...\n    if (edge.WindDelta === 0) {\n      //are we inside a subj polygon ...\n      var Inside = true;\n      var e2 = e.PrevInAEL;\n      while (e2 !== null) {\n        if (e2.PolyTyp === e.PolyTyp && e2.WindDelta !== 0)\n          Inside = !Inside;\n        e2 = e2.PrevInAEL;\n      }\n      edge.WindCnt = (Inside ? 0 : 1);\n    } else {\n      edge.WindCnt = edge.WindDelta;\n    }\n    edge.WindCnt2 = e.WindCnt2;\n    e = e.NextInAEL;\n    //ie get ready to calc WindCnt2\n  } else {\n    //nonZero, Positive or Negative filling ...\n    if (e.WindCnt * e.WindDelta < 0) {\n      //prev edge is 'decreasing' WindCount (WC) toward zero\n      //so we're outside the previous polygon ...\n      if (Math.abs(e.WindCnt) > 1) {\n        //outside prev poly but still inside another.\n        //when reversing direction of prev poly use the same WC\n        if (e.WindDelta * edge.WindDelta < 0)\n          edge.WindCnt = e.WindCnt;\n        else\n          edge.WindCnt = e.WindCnt + edge.WindDelta;\n      } else\n        edge.WindCnt = (edge.WindDelta === 0 ? 1 : edge.WindDelta);\n    } else {\n      //prev edge is 'increasing' WindCount (WC) away from zero\n      //so we're inside the previous polygon ...\n      if (edge.WindDelta === 0)\n        edge.WindCnt = (e.WindCnt < 0 ? e.WindCnt - 1 : e.WindCnt + 1);\n      else if (e.WindDelta * edge.WindDelta < 0)\n        edge.WindCnt = e.WindCnt;\n      else\n        edge.WindCnt = e.WindCnt + edge.WindDelta;\n    }\n    edge.WindCnt2 = e.WindCnt2;\n    e = e.NextInAEL;\n    //ie get ready to calc WindCnt2\n  }\n  //update WindCnt2 ...\n  if (this.IsEvenOddAltFillType(edge)) {\n    //EvenOdd filling ...\n    while (e !== edge) {\n      if (e.WindDelta !== 0)\n        edge.WindCnt2 = (edge.WindCnt2 === 0 ? 1 : 0);\n      e = e.NextInAEL;\n    }\n  } else {\n    //nonZero, Positive or Negative filling ...\n    while (e !== edge) {\n      edge.WindCnt2 += e.WindDelta;\n      e = e.NextInAEL;\n    }\n  }\n};\n\nClipperLib.Clipper.prototype.AddEdgeToSEL = function (edge) {\n  //SEL pointers in PEdge are use to build transient lists of horizontal edges.\n  //However, since we don't need to worry about processing order, all additions\n  //are made to the front of the list ...\n  if (this.m_SortedEdges === null) {\n    this.m_SortedEdges = edge;\n    edge.PrevInSEL = null;\n    edge.NextInSEL = null;\n  } else {\n    edge.NextInSEL = this.m_SortedEdges;\n    edge.PrevInSEL = null;\n    this.m_SortedEdges.PrevInSEL = edge;\n    this.m_SortedEdges = edge;\n  }\n};\n\nClipperLib.Clipper.prototype.PopEdgeFromSEL = function (e) {\n  //Pop edge from front of SEL (ie SEL is a FILO list)\n  e.v = this.m_SortedEdges;\n  if (e.v === null) {\n    return false;\n  }\n  var oldE = e.v;\n  this.m_SortedEdges = e.v.NextInSEL;\n  if (this.m_SortedEdges !== null) {\n    this.m_SortedEdges.PrevInSEL = null;\n  }\n  oldE.NextInSEL = null;\n  oldE.PrevInSEL = null;\n  return true;\n};\n\nClipperLib.Clipper.prototype.CopyAELToSEL = function () {\n  var e = this.m_ActiveEdges;\n  this.m_SortedEdges = e;\n  while (e !== null) {\n    e.PrevInSEL = e.PrevInAEL;\n    e.NextInSEL = e.NextInAEL;\n    e = e.NextInAEL;\n  }\n};\n\nClipperLib.Clipper.prototype.SwapPositionsInSEL = function (edge1, edge2) {\n  if (edge1.NextInSEL === null && edge1.PrevInSEL === null)\n    return;\n  if (edge2.NextInSEL === null && edge2.PrevInSEL === null)\n    return;\n  if (edge1.NextInSEL === edge2) {\n    var next = edge2.NextInSEL;\n    if (next !== null)\n      next.PrevInSEL = edge1;\n    var prev = edge1.PrevInSEL;\n    if (prev !== null)\n      prev.NextInSEL = edge2;\n    edge2.PrevInSEL = prev;\n    edge2.NextInSEL = edge1;\n    edge1.PrevInSEL = edge2;\n    edge1.NextInSEL = next;\n  } else if (edge2.NextInSEL === edge1) {\n    var next = edge1.NextInSEL;\n    if (next !== null)\n      next.PrevInSEL = edge2;\n    var prev = edge2.PrevInSEL;\n    if (prev !== null)\n      prev.NextInSEL = edge1;\n    edge1.PrevInSEL = prev;\n    edge1.NextInSEL = edge2;\n    edge2.PrevInSEL = edge1;\n    edge2.NextInSEL = next;\n  } else {\n    var next = edge1.NextInSEL;\n    var prev = edge1.PrevInSEL;\n    edge1.NextInSEL = edge2.NextInSEL;\n    if (edge1.NextInSEL !== null)\n      edge1.NextInSEL.PrevInSEL = edge1;\n    edge1.PrevInSEL = edge2.PrevInSEL;\n    if (edge1.PrevInSEL !== null)\n      edge1.PrevInSEL.NextInSEL = edge1;\n    edge2.NextInSEL = next;\n    if (edge2.NextInSEL !== null)\n      edge2.NextInSEL.PrevInSEL = edge2;\n    edge2.PrevInSEL = prev;\n    if (edge2.PrevInSEL !== null)\n      edge2.PrevInSEL.NextInSEL = edge2;\n  }\n  if (edge1.PrevInSEL === null)\n    this.m_SortedEdges = edge1;\n  else if (edge2.PrevInSEL === null)\n    this.m_SortedEdges = edge2;\n};\n\nClipperLib.Clipper.prototype.AddLocalMaxPoly = function (e1, e2, pt) {\n  this.AddOutPt(e1, pt);\n  if (e2.WindDelta === 0) this.AddOutPt(e2, pt);\n  if (e1.OutIdx === e2.OutIdx) {\n    e1.OutIdx = -1;\n    e2.OutIdx = -1;\n  } else if (e1.OutIdx < e2.OutIdx)\n    this.AppendPolygon(e1, e2);\n  else\n    this.AppendPolygon(e2, e1);\n};\n\nClipperLib.Clipper.prototype.AddLocalMinPoly = function (e1, e2, pt) {\n  var result;\n  var e, prevE;\n  if (ClipperLib.ClipperBase.IsHorizontal(e2) || (e1.Dx > e2.Dx)) {\n    result = this.AddOutPt(e1, pt);\n    e2.OutIdx = e1.OutIdx;\n    e1.Side = ClipperLib.EdgeSide.esLeft;\n    e2.Side = ClipperLib.EdgeSide.esRight;\n    e = e1;\n    if (e.PrevInAEL === e2)\n      prevE = e2.PrevInAEL;\n    else\n      prevE = e.PrevInAEL;\n  } else {\n    result = this.AddOutPt(e2, pt);\n    e1.OutIdx = e2.OutIdx;\n    e1.Side = ClipperLib.EdgeSide.esRight;\n    e2.Side = ClipperLib.EdgeSide.esLeft;\n    e = e2;\n    if (e.PrevInAEL === e1)\n      prevE = e1.PrevInAEL;\n    else\n      prevE = e.PrevInAEL;\n  }\n\n  if (prevE !== null && prevE.OutIdx >= 0 && prevE.Top[1] < pt[1] && e.Top[1] < pt[1]) {\n    var xPrev = ClipperLib.Clipper.TopX(prevE, pt[1]);\n    var xE = ClipperLib.Clipper.TopX(e, pt[1]);\n    if ((xPrev === xE) && (e.WindDelta !== 0) && (prevE.WindDelta !== 0) && ClipperLib.ClipperBase.SlopesEqual5(new ClipperLib.FPoint2(xPrev, pt[1]), prevE.Top, new ClipperLib.FPoint2(xE, pt[1]), e.Top)) {\n      var outPt = this.AddOutPt(prevE, pt);\n      this.AddJoin(result, outPt, e.Top);\n    }\n  }\n  return result;\n};\n\nClipperLib.Clipper.prototype.AddOutPt = function (e, pt) {\n  if (e.OutIdx < 0) {\n    var outRec = this.CreateOutRec();\n    outRec.IsOpen = (e.WindDelta === 0);\n    var newOp = new ClipperLib.OutPt();\n    outRec.Pts = newOp;\n    newOp.Idx = outRec.Idx;\n    //newOp.Pt = pt;\n    newOp.Pt[0] = pt[0];\n    newOp.Pt[1] = pt[1];\n    if (ClipperLib.use_xyz) newOp.Pt.Z = pt.Z;\n    newOp.Next = newOp;\n    newOp.Prev = newOp;\n    if (!outRec.IsOpen)\n      this.SetHoleState(e, outRec);\n    e.OutIdx = outRec.Idx;\n    //nb: do this after SetZ !\n    return newOp;\n  } else {\n    var outRec = this.m_PolyOuts[e.OutIdx];\n    //OutRec.Pts is the 'Left-most' point & OutRec.Pts.Prev is the 'Right-most'\n    var op = outRec.Pts;\n    var ToFront = (e.Side === ClipperLib.EdgeSide.esLeft);\n    if (ToFront && ClipperLib.FPoint.op_Equality(pt, op.Pt))\n      return op;\n    else if (!ToFront && ClipperLib.FPoint.op_Equality(pt, op.Prev.Pt))\n      return op.Prev;\n    var newOp = new ClipperLib.OutPt();\n    newOp.Idx = outRec.Idx;\n    //newOp.Pt = pt;\n    newOp.Pt[0] = pt[0];\n    newOp.Pt[1] = pt[1];\n    if (ClipperLib.use_xyz) newOp.Pt.Z = pt.Z;\n    newOp.Next = op;\n    newOp.Prev = op.Prev;\n    newOp.Prev.Next = newOp;\n    op.Prev = newOp;\n    if (ToFront)\n      outRec.Pts = newOp;\n    return newOp;\n  }\n};\n\nClipperLib.Clipper.prototype.GetLastOutPt = function (e) {\n  var outRec = this.m_PolyOuts[e.OutIdx];\n  if (e.Side === ClipperLib.EdgeSide.esLeft) {\n    return outRec.Pts;\n  } else {\n    return outRec.Pts.Prev;\n  }\n};\n\nClipperLib.Clipper.prototype.SwapPoints = function (pt1, pt2) {\n  var tmp = new ClipperLib.FPoint1(pt1.Value);\n  //pt1.Value = pt2.Value;\n  pt1.Value[0] = pt2.Value[0];\n  pt1.Value[1] = pt2.Value[1];\n  if (ClipperLib.use_xyz) pt1.Value.Z = pt2.Value.Z;\n  //pt2.Value = tmp;\n  pt2.Value[0] = tmp[0];\n  pt2.Value[1] = tmp[1];\n  if (ClipperLib.use_xyz) pt2.Value.Z = tmp.Z;\n};\n\nClipperLib.Clipper.prototype.HorzSegmentsOverlap = function (seg1a, seg1b, seg2a, seg2b) {\n  var tmp;\n  if (seg1a > seg1b) {\n    tmp = seg1a;\n    seg1a = seg1b;\n    seg1b = tmp;\n  }\n  if (seg2a > seg2b) {\n    tmp = seg2a;\n    seg2a = seg2b;\n    seg2b = tmp;\n  }\n  return (seg1a < seg2b) && (seg2a < seg1b);\n}\n\nClipperLib.Clipper.prototype.SetHoleState = function (e, outRec) {\n  var e2 = e.PrevInAEL;\n  var eTmp = null;\n  while (e2 !== null) {\n    if (e2.OutIdx >= 0 && e2.WindDelta !== 0) {\n      if (eTmp === null)\n        eTmp = e2;\n      else if (eTmp.OutIdx === e2.OutIdx)\n        eTmp = null; //paired\n    }\n    e2 = e2.PrevInAEL;\n  }\n\n  if (eTmp === null) {\n    outRec.FirstLeft = null;\n    outRec.IsHole = false;\n  } else {\n    outRec.FirstLeft = this.m_PolyOuts[eTmp.OutIdx];\n    outRec.IsHole = !outRec.FirstLeft.IsHole;\n  }\n};\n\nClipperLib.Clipper.prototype.GetDx = function (pt1, pt2) {\n  if (pt1[1] === pt2[1])\n    return ClipperLib.ClipperBase.horizontal;\n  else\n    return (pt2[0] - pt1[0]) / (pt2[1] - pt1[1]);\n};\n\nClipperLib.Clipper.prototype.FirstIsBottomPt = function (btmPt1, btmPt2) {\n  var p = btmPt1.Prev;\n  while ((ClipperLib.FPoint.op_Equality(p.Pt, btmPt1.Pt)) && (p !== btmPt1))\n    p = p.Prev;\n  var dx1p = Math.abs(this.GetDx(btmPt1.Pt, p.Pt));\n  p = btmPt1.Next;\n  while ((ClipperLib.FPoint.op_Equality(p.Pt, btmPt1.Pt)) && (p !== btmPt1))\n    p = p.Next;\n  var dx1n = Math.abs(this.GetDx(btmPt1.Pt, p.Pt));\n  p = btmPt2.Prev;\n  while ((ClipperLib.FPoint.op_Equality(p.Pt, btmPt2.Pt)) && (p !== btmPt2))\n    p = p.Prev;\n  var dx2p = Math.abs(this.GetDx(btmPt2.Pt, p.Pt));\n  p = btmPt2.Next;\n  while ((ClipperLib.FPoint.op_Equality(p.Pt, btmPt2.Pt)) && (p !== btmPt2))\n    p = p.Next;\n  var dx2n = Math.abs(this.GetDx(btmPt2.Pt, p.Pt));\n\n  if (Math.max(dx1p, dx1n) === Math.max(dx2p, dx2n) && Math.min(dx1p, dx1n) === Math.min(dx2p, dx2n)) {\n    return this.Area(btmPt1) > 0; //if otherwise identical use orientation\n  } else {\n    return (dx1p >= dx2p && dx1p >= dx2n) || (dx1n >= dx2p && dx1n >= dx2n);\n  }\n};\n\nClipperLib.Clipper.prototype.GetBottomPt = function (pp) {\n  var dups = null;\n  var p = pp.Next;\n  while (p !== pp) {\n    if (p.Pt[1] > pp.Pt[1]) {\n      pp = p;\n      dups = null;\n    } else if (p.Pt[1] === pp.Pt[1] && p.Pt[0] <= pp.Pt[0]) {\n      if (p.Pt[0] < pp.Pt[0]) {\n        dups = null;\n        pp = p;\n      } else {\n        if (p.Next !== pp && p.Prev !== pp)\n          dups = p;\n      }\n    }\n    p = p.Next;\n  }\n  if (dups !== null) {\n    //there appears to be at least 2 vertices at bottomPt so ...\n    while (dups !== p) {\n      if (!this.FirstIsBottomPt(p, dups))\n        pp = dups;\n      dups = dups.Next;\n      while (ClipperLib.FPoint.op_Inequality(dups.Pt, pp.Pt))\n        dups = dups.Next;\n    }\n  }\n  return pp;\n};\n\nClipperLib.Clipper.prototype.GetLowermostRec = function (outRec1, outRec2) {\n  //work out which polygon fragment has the correct hole state ...\n  if (outRec1.BottomPt === null)\n    outRec1.BottomPt = this.GetBottomPt(outRec1.Pts);\n  if (outRec2.BottomPt === null)\n    outRec2.BottomPt = this.GetBottomPt(outRec2.Pts);\n  var bPt1 = outRec1.BottomPt;\n  var bPt2 = outRec2.BottomPt;\n  if (bPt1.Pt[1] > bPt2.Pt[1])\n    return outRec1;\n  else if (bPt1.Pt[1] < bPt2.Pt[1])\n    return outRec2;\n  else if (bPt1.Pt[0] < bPt2.Pt[0])\n    return outRec1;\n  else if (bPt1.Pt[0] > bPt2.Pt[0])\n    return outRec2;\n  else if (bPt1.Next === bPt1)\n    return outRec2;\n  else if (bPt2.Next === bPt2)\n    return outRec1;\n  else if (this.FirstIsBottomPt(bPt1, bPt2))\n    return outRec1;\n  else\n    return outRec2;\n};\n\nClipperLib.Clipper.prototype.OutRec1RightOfOutRec2 = function (outRec1, outRec2) {\n  do {\n    outRec1 = outRec1.FirstLeft;\n    if (outRec1 === outRec2)\n      return true;\n  }\n  while (outRec1 !== null)\n  return false;\n};\n\nClipperLib.Clipper.prototype.GetOutRec = function (idx) {\n  var outrec = this.m_PolyOuts[idx];\n  while (outrec !== this.m_PolyOuts[outrec.Idx])\n    outrec = this.m_PolyOuts[outrec.Idx];\n  return outrec;\n};\n\nClipperLib.Clipper.prototype.AppendPolygon = function (e1, e2) {\n  //get the start and ends of both output polygons ...\n  var outRec1 = this.m_PolyOuts[e1.OutIdx];\n  var outRec2 = this.m_PolyOuts[e2.OutIdx];\n  var holeStateRec;\n  if (this.OutRec1RightOfOutRec2(outRec1, outRec2))\n    holeStateRec = outRec2;\n  else if (this.OutRec1RightOfOutRec2(outRec2, outRec1))\n    holeStateRec = outRec1;\n  else\n    holeStateRec = this.GetLowermostRec(outRec1, outRec2);\n\n  //get the start and ends of both output polygons and\n  //join E2 poly onto E1 poly and delete pointers to E2 ...\n\n  var p1_lft = outRec1.Pts;\n  var p1_rt = p1_lft.Prev;\n  var p2_lft = outRec2.Pts;\n  var p2_rt = p2_lft.Prev;\n  //join e2 poly onto e1 poly and delete pointers to e2 ...\n  if (e1.Side === ClipperLib.EdgeSide.esLeft) {\n    if (e2.Side === ClipperLib.EdgeSide.esLeft) {\n      //z y x a b c\n      this.ReversePolyPtLinks(p2_lft);\n      p2_lft.Next = p1_lft;\n      p1_lft.Prev = p2_lft;\n      p1_rt.Next = p2_rt;\n      p2_rt.Prev = p1_rt;\n      outRec1.Pts = p2_rt;\n    } else {\n      //x y z a b c\n      p2_rt.Next = p1_lft;\n      p1_lft.Prev = p2_rt;\n      p2_lft.Prev = p1_rt;\n      p1_rt.Next = p2_lft;\n      outRec1.Pts = p2_lft;\n    }\n  } else {\n    if (e2.Side === ClipperLib.EdgeSide.esRight) {\n      //a b c z y x\n      this.ReversePolyPtLinks(p2_lft);\n      p1_rt.Next = p2_rt;\n      p2_rt.Prev = p1_rt;\n      p2_lft.Next = p1_lft;\n      p1_lft.Prev = p2_lft;\n    } else {\n      //a b c x y z\n      p1_rt.Next = p2_lft;\n      p2_lft.Prev = p1_rt;\n      p1_lft.Prev = p2_rt;\n      p2_rt.Next = p1_lft;\n    }\n  }\n  outRec1.BottomPt = null;\n  if (holeStateRec === outRec2) {\n    if (outRec2.FirstLeft !== outRec1)\n      outRec1.FirstLeft = outRec2.FirstLeft;\n    outRec1.IsHole = outRec2.IsHole;\n  }\n  outRec2.Pts = null;\n  outRec2.BottomPt = null;\n  outRec2.FirstLeft = outRec1;\n  var OKIdx = e1.OutIdx;\n  var ObsoleteIdx = e2.OutIdx;\n  e1.OutIdx = -1;\n  //nb: safe because we only get here via AddLocalMaxPoly\n  e2.OutIdx = -1;\n  var e = this.m_ActiveEdges;\n  while (e !== null) {\n    if (e.OutIdx === ObsoleteIdx) {\n      e.OutIdx = OKIdx;\n      e.Side = e1.Side;\n      break;\n    }\n    e = e.NextInAEL;\n  }\n  outRec2.Idx = outRec1.Idx;\n};\n\nClipperLib.Clipper.prototype.ReversePolyPtLinks = function (pp) {\n  if (pp === null)\n    return;\n  var pp1;\n  var pp2;\n  pp1 = pp;\n  do {\n    pp2 = pp1.Next;\n    pp1.Next = pp1.Prev;\n    pp1.Prev = pp2;\n    pp1 = pp2;\n  }\n  while (pp1 !== pp)\n};\n\nClipperLib.Clipper.SwapSides = function (edge1, edge2) {\n  var side = edge1.Side;\n  edge1.Side = edge2.Side;\n  edge2.Side = side;\n};\n\nClipperLib.Clipper.SwapPolyIndexes = function (edge1, edge2) {\n  var outIdx = edge1.OutIdx;\n  edge1.OutIdx = edge2.OutIdx;\n  edge2.OutIdx = outIdx;\n};\n\nClipperLib.Clipper.prototype.IntersectEdges = function (e1, e2, pt) {\n  //e1 will be to the left of e2 BELOW the intersection. Therefore e1 is before\n  //e2 in AEL except when e1 is being inserted at the intersection point ...\n  var e1Contributing = (e1.OutIdx >= 0);\n  var e2Contributing = (e2.OutIdx >= 0);\n\n  if (ClipperLib.use_xyz)\n    this.SetZ(pt, e1, e2);\n\n  if (ClipperLib.use_lines) {\n    //if either edge is on an OPEN path ...\n    if (e1.WindDelta === 0 || e2.WindDelta === 0) {\n      //ignore subject-subject open path intersections UNLESS they\n      //are both open paths, AND they are both 'contributing maximas' ...\n      if (e1.WindDelta === 0 && e2.WindDelta === 0) return;\n      //if intersecting a subj line with a subj poly ...\n      else if (e1.PolyTyp === e2.PolyTyp &&\n        e1.WindDelta !== e2.WindDelta && this.m_ClipType === ClipperLib.ClipType.ctUnion) {\n        if (e1.WindDelta === 0) {\n          if (e2Contributing) {\n            this.AddOutPt(e1, pt);\n            if (e1Contributing)\n              e1.OutIdx = -1;\n          }\n        } else {\n          if (e1Contributing) {\n            this.AddOutPt(e2, pt);\n            if (e2Contributing)\n              e2.OutIdx = -1;\n          }\n        }\n      } else if (e1.PolyTyp !== e2.PolyTyp) {\n        if ((e1.WindDelta === 0) && Math.abs(e2.WindCnt) === 1 &&\n          (this.m_ClipType !== ClipperLib.ClipType.ctUnion || e2.WindCnt2 === 0)) {\n          this.AddOutPt(e1, pt);\n          if (e1Contributing)\n            e1.OutIdx = -1;\n        } else if ((e2.WindDelta === 0) && (Math.abs(e1.WindCnt) === 1) &&\n          (this.m_ClipType !== ClipperLib.ClipType.ctUnion || e1.WindCnt2 === 0)) {\n          this.AddOutPt(e2, pt);\n          if (e2Contributing)\n            e2.OutIdx = -1;\n        }\n      }\n      return;\n    }\n  }\n  //update winding counts...\n  //assumes that e1 will be to the Right of e2 ABOVE the intersection\n  if (e1.PolyTyp === e2.PolyTyp) {\n    if (this.IsEvenOddFillType(e1)) {\n      var oldE1WindCnt = e1.WindCnt;\n      e1.WindCnt = e2.WindCnt;\n      e2.WindCnt = oldE1WindCnt;\n    } else {\n      if (e1.WindCnt + e2.WindDelta === 0)\n        e1.WindCnt = -e1.WindCnt;\n      else\n        e1.WindCnt += e2.WindDelta;\n      if (e2.WindCnt - e1.WindDelta === 0)\n        e2.WindCnt = -e2.WindCnt;\n      else\n        e2.WindCnt -= e1.WindDelta;\n    }\n  } else {\n    if (!this.IsEvenOddFillType(e2))\n      e1.WindCnt2 += e2.WindDelta;\n    else\n      e1.WindCnt2 = (e1.WindCnt2 === 0) ? 1 : 0;\n    if (!this.IsEvenOddFillType(e1))\n      e2.WindCnt2 -= e1.WindDelta;\n    else\n      e2.WindCnt2 = (e2.WindCnt2 === 0) ? 1 : 0;\n  }\n  var e1FillType, e2FillType, e1FillType2, e2FillType2;\n  if (e1.PolyTyp === ClipperLib.PolyType.ptSubject) {\n    e1FillType = this.m_SubjFillType;\n    e1FillType2 = this.m_ClipFillType;\n  } else {\n    e1FillType = this.m_ClipFillType;\n    e1FillType2 = this.m_SubjFillType;\n  }\n  if (e2.PolyTyp === ClipperLib.PolyType.ptSubject) {\n    e2FillType = this.m_SubjFillType;\n    e2FillType2 = this.m_ClipFillType;\n  } else {\n    e2FillType = this.m_ClipFillType;\n    e2FillType2 = this.m_SubjFillType;\n  }\n  var e1Wc, e2Wc;\n  switch (e1FillType) {\n    case ClipperLib.PolyFillType.pftPositive:\n      e1Wc = e1.WindCnt;\n      break;\n    case ClipperLib.PolyFillType.pftNegative:\n      e1Wc = -e1.WindCnt;\n      break;\n    default:\n      e1Wc = Math.abs(e1.WindCnt);\n      break;\n  }\n  switch (e2FillType) {\n    case ClipperLib.PolyFillType.pftPositive:\n      e2Wc = e2.WindCnt;\n      break;\n    case ClipperLib.PolyFillType.pftNegative:\n      e2Wc = -e2.WindCnt;\n      break;\n    default:\n      e2Wc = Math.abs(e2.WindCnt);\n      break;\n  }\n  if (e1Contributing && e2Contributing) {\n    if ((e1Wc !== 0 && e1Wc !== 1) || (e2Wc !== 0 && e2Wc !== 1) ||\n      (e1.PolyTyp !== e2.PolyTyp && this.m_ClipType !== ClipperLib.ClipType.ctXor)) {\n      this.AddLocalMaxPoly(e1, e2, pt);\n    } else {\n      this.AddOutPt(e1, pt);\n      this.AddOutPt(e2, pt);\n      ClipperLib.Clipper.SwapSides(e1, e2);\n      ClipperLib.Clipper.SwapPolyIndexes(e1, e2);\n    }\n  } else if (e1Contributing) {\n    if (e2Wc === 0 || e2Wc === 1) {\n      this.AddOutPt(e1, pt);\n      ClipperLib.Clipper.SwapSides(e1, e2);\n      ClipperLib.Clipper.SwapPolyIndexes(e1, e2);\n    }\n  } else if (e2Contributing) {\n    if (e1Wc === 0 || e1Wc === 1) {\n      this.AddOutPt(e2, pt);\n      ClipperLib.Clipper.SwapSides(e1, e2);\n      ClipperLib.Clipper.SwapPolyIndexes(e1, e2);\n    }\n  } else if ((e1Wc === 0 || e1Wc === 1) && (e2Wc === 0 || e2Wc === 1)) {\n    //neither edge is currently contributing ...\n    var e1Wc2, e2Wc2;\n    switch (e1FillType2) {\n      case ClipperLib.PolyFillType.pftPositive:\n        e1Wc2 = e1.WindCnt2;\n        break;\n      case ClipperLib.PolyFillType.pftNegative:\n        e1Wc2 = -e1.WindCnt2;\n        break;\n      default:\n        e1Wc2 = Math.abs(e1.WindCnt2);\n        break;\n    }\n    switch (e2FillType2) {\n      case ClipperLib.PolyFillType.pftPositive:\n        e2Wc2 = e2.WindCnt2;\n        break;\n      case ClipperLib.PolyFillType.pftNegative:\n        e2Wc2 = -e2.WindCnt2;\n        break;\n      default:\n        e2Wc2 = Math.abs(e2.WindCnt2);\n        break;\n    }\n    if (e1.PolyTyp !== e2.PolyTyp) {\n      this.AddLocalMinPoly(e1, e2, pt);\n    } else if (e1Wc === 1 && e2Wc === 1)\n      switch (this.m_ClipType) {\n        case ClipperLib.ClipType.ctIntersection:\n          if (e1Wc2 > 0 && e2Wc2 > 0)\n            this.AddLocalMinPoly(e1, e2, pt);\n          break;\n        case ClipperLib.ClipType.ctUnion:\n          if (e1Wc2 <= 0 && e2Wc2 <= 0)\n            this.AddLocalMinPoly(e1, e2, pt);\n          break;\n        case ClipperLib.ClipType.ctDifference:\n          if (((e1.PolyTyp === ClipperLib.PolyType.ptClip) && (e1Wc2 > 0) && (e2Wc2 > 0)) ||\n            ((e1.PolyTyp === ClipperLib.PolyType.ptSubject) && (e1Wc2 <= 0) && (e2Wc2 <= 0)))\n            this.AddLocalMinPoly(e1, e2, pt);\n          break;\n        case ClipperLib.ClipType.ctXor:\n          this.AddLocalMinPoly(e1, e2, pt);\n          break;\n      }\n    else\n      ClipperLib.Clipper.SwapSides(e1, e2);\n  }\n};\n\nClipperLib.Clipper.prototype.DeleteFromSEL = function (e) {\n  var SelPrev = e.PrevInSEL;\n  var SelNext = e.NextInSEL;\n  if (SelPrev === null && SelNext === null && (e !== this.m_SortedEdges))\n    return;\n  //already deleted\n  if (SelPrev !== null)\n    SelPrev.NextInSEL = SelNext;\n  else\n    this.m_SortedEdges = SelNext;\n  if (SelNext !== null)\n    SelNext.PrevInSEL = SelPrev;\n  e.NextInSEL = null;\n  e.PrevInSEL = null;\n};\n\nClipperLib.Clipper.prototype.ProcessHorizontals = function () {\n  var horzEdge = {}; //m_SortedEdges;\n  while (this.PopEdgeFromSEL(horzEdge)) {\n    this.ProcessHorizontal(horzEdge.v);\n  }\n};\n\nClipperLib.Clipper.prototype.GetHorzDirection = function (HorzEdge, $var) {\n  if (HorzEdge.Bot[0] < HorzEdge.Top[0]) {\n    $var.Left = HorzEdge.Bot[0];\n    $var.Right = HorzEdge.Top[0];\n    $var.Dir = ClipperLib.Direction.dLeftToRight;\n  } else {\n    $var.Left = HorzEdge.Top[0];\n    $var.Right = HorzEdge.Bot[0];\n    $var.Dir = ClipperLib.Direction.dRightToLeft;\n  }\n};\n\nClipperLib.Clipper.prototype.ProcessHorizontal = function (horzEdge) {\n  var $var = {\n    Dir: null,\n    Left: null,\n    Right: null\n  };\n\n  this.GetHorzDirection(horzEdge, $var);\n  var dir = $var.Dir;\n  var horzLeft = $var.Left;\n  var horzRight = $var.Right;\n\n  var IsOpen = horzEdge.WindDelta === 0;\n\n  var eLastHorz = horzEdge,\n    eMaxPair = null;\n  while (eLastHorz.NextInLML !== null && ClipperLib.ClipperBase.IsHorizontal(eLastHorz.NextInLML))\n    eLastHorz = eLastHorz.NextInLML;\n  if (eLastHorz.NextInLML === null)\n    eMaxPair = this.GetMaximaPair(eLastHorz);\n\n  var currMax = this.m_Maxima;\n  if (currMax !== null) {\n    //get the first maxima in range (X) ...\n    if (dir === ClipperLib.Direction.dLeftToRight) {\n      while (currMax !== null && currMax[0] <= horzEdge.Bot[0]) {\n        currMax = currMax.Next;\n      }\n      if (currMax !== null && currMax[0] >= eLastHorz.Top[0]) {\n        currMax = null;\n      }\n    } else {\n      while (currMax.Next !== null && currMax.Next[0] < horzEdge.Bot[0]) {\n        currMax = currMax.Next;\n      }\n      if (currMax[0] <= eLastHorz.Top[0]) {\n        currMax = null;\n      }\n    }\n  }\n  var op1 = null;\n  for (;;) //loop through consec. horizontal edges\n  {\n    var IsLastHorz = (horzEdge === eLastHorz);\n    var e = this.GetNextInAEL(horzEdge, dir);\n    while (e !== null) {\n      //this code block inserts extra coords into horizontal edges (in output\n      //polygons) whereever maxima touch these horizontal edges. This helps\n      //'simplifying' polygons (ie if the Simplify property is set).\n      if (currMax !== null) {\n        if (dir === ClipperLib.Direction.dLeftToRight) {\n          while (currMax !== null && currMax[0] < e.Curr[0]) {\n            if (horzEdge.OutIdx >= 0 && !IsOpen) {\n              this.AddOutPt(horzEdge, new ClipperLib.FPoint2(currMax[0], horzEdge.Bot[1]));\n            }\n            currMax = currMax.Next;\n          }\n        } else {\n          while (currMax !== null && currMax[0] > e.Curr[0]) {\n            if (horzEdge.OutIdx >= 0 && !IsOpen) {\n              this.AddOutPt(horzEdge, new ClipperLib.FPoint2(currMax[0], horzEdge.Bot[1]));\n            }\n            currMax = currMax.Prev;\n          }\n        }\n      }\n\n      if ((dir === ClipperLib.Direction.dLeftToRight && e.Curr[0] > horzRight) || (dir === ClipperLib.Direction.dRightToLeft && e.Curr[0] < horzLeft)) {\n        break;\n      }\n\n      //Also break if we've got to the end of an intermediate horizontal edge ...\n      //nb: Smaller Dx's are to the right of larger Dx's ABOVE the horizontal.\n      if (e.Curr[0] === horzEdge.Top[0] && horzEdge.NextInLML !== null && e.Dx < horzEdge.NextInLML.Dx)\n        break;\n\n      if (horzEdge.OutIdx >= 0 && !IsOpen) //note: may be done multiple times\n      {\n        if (ClipperLib.use_xyz) {\n          if (dir === ClipperLib.Direction.dLeftToRight)\n            this.SetZ(e.Curr, horzEdge, e);\n          else this.SetZ(e.Curr, e, horzEdge);\n        }\n\n        op1 = this.AddOutPt(horzEdge, e.Curr);\n        var eNextHorz = this.m_SortedEdges;\n        while (eNextHorz !== null) {\n          if (eNextHorz.OutIdx >= 0 && this.HorzSegmentsOverlap(horzEdge.Bot[0], horzEdge.Top[0], eNextHorz.Bot[0], eNextHorz.Top[0])) {\n            var op2 = this.GetLastOutPt(eNextHorz);\n            this.AddJoin(op2, op1, eNextHorz.Top);\n          }\n          eNextHorz = eNextHorz.NextInSEL;\n        }\n        this.AddGhostJoin(op1, horzEdge.Bot);\n      }\n\n      //OK, so far we're still in range of the horizontal Edge  but make sure\n      //we're at the last of consec. horizontals when matching with eMaxPair\n      if (e === eMaxPair && IsLastHorz) {\n        if (horzEdge.OutIdx >= 0) {\n          this.AddLocalMaxPoly(horzEdge, eMaxPair, horzEdge.Top);\n        }\n        this.DeleteFromAEL(horzEdge);\n        this.DeleteFromAEL(eMaxPair);\n        return;\n      }\n\n      if (dir === ClipperLib.Direction.dLeftToRight) {\n        var Pt = new ClipperLib.FPoint2(e.Curr[0], horzEdge.Curr[1]);\n        this.IntersectEdges(horzEdge, e, Pt);\n      } else {\n        var Pt = new ClipperLib.FPoint2(e.Curr[0], horzEdge.Curr[1]);\n        this.IntersectEdges(e, horzEdge, Pt);\n      }\n      var eNext = this.GetNextInAEL(e, dir);\n      this.SwapPositionsInAEL(horzEdge, e);\n      e = eNext;\n    } //end while(e !== null)\n\n    //Break out of loop if HorzEdge.NextInLML is not also horizontal ...\n    if (horzEdge.NextInLML === null || !ClipperLib.ClipperBase.IsHorizontal(horzEdge.NextInLML)) {\n      break;\n    }\n\n    horzEdge = this.UpdateEdgeIntoAEL(horzEdge);\n    if (horzEdge.OutIdx >= 0) {\n      this.AddOutPt(horzEdge, horzEdge.Bot);\n    }\n\n    $var = {\n      Dir: dir,\n      Left: horzLeft,\n      Right: horzRight\n    };\n\n    this.GetHorzDirection(horzEdge, $var);\n    dir = $var.Dir;\n    horzLeft = $var.Left;\n    horzRight = $var.Right;\n\n  } //end for (;;)\n\n  if (horzEdge.OutIdx >= 0 && op1 === null) {\n    op1 = this.GetLastOutPt(horzEdge);\n    var eNextHorz = this.m_SortedEdges;\n    while (eNextHorz !== null) {\n      if (eNextHorz.OutIdx >= 0 && this.HorzSegmentsOverlap(horzEdge.Bot[0], horzEdge.Top[0], eNextHorz.Bot[0], eNextHorz.Top[0])) {\n        var op2 = this.GetLastOutPt(eNextHorz);\n        this.AddJoin(op2, op1, eNextHorz.Top);\n      }\n      eNextHorz = eNextHorz.NextInSEL;\n    }\n    this.AddGhostJoin(op1, horzEdge.Top);\n  }\n\n  if (horzEdge.NextInLML !== null) {\n    if (horzEdge.OutIdx >= 0) {\n      op1 = this.AddOutPt(horzEdge, horzEdge.Top);\n\n      horzEdge = this.UpdateEdgeIntoAEL(horzEdge);\n      if (horzEdge.WindDelta === 0) {\n        return;\n      }\n      //nb: HorzEdge is no longer horizontal here\n      var ePrev = horzEdge.PrevInAEL;\n      var eNext = horzEdge.NextInAEL;\n      if (ePrev !== null && ePrev.Curr[0] === horzEdge.Bot[0] && ePrev.Curr[1] === horzEdge.Bot[1] && ePrev.WindDelta === 0 && (ePrev.OutIdx >= 0 && ePrev.Curr[1] > ePrev.Top[1] && ClipperLib.ClipperBase.SlopesEqual3(horzEdge, ePrev))) {\n        var op2 = this.AddOutPt(ePrev, horzEdge.Bot);\n        this.AddJoin(op1, op2, horzEdge.Top);\n      } else if (eNext !== null && eNext.Curr[0] === horzEdge.Bot[0] && eNext.Curr[1] === horzEdge.Bot[1] && eNext.WindDelta !== 0 && eNext.OutIdx >= 0 && eNext.Curr[1] > eNext.Top[1] && ClipperLib.ClipperBase.SlopesEqual3(horzEdge, eNext)) {\n        var op2 = this.AddOutPt(eNext, horzEdge.Bot);\n        this.AddJoin(op1, op2, horzEdge.Top);\n      }\n    } else {\n      horzEdge = this.UpdateEdgeIntoAEL(horzEdge);\n    }\n  } else {\n    if (horzEdge.OutIdx >= 0) {\n      this.AddOutPt(horzEdge, horzEdge.Top);\n    }\n    this.DeleteFromAEL(horzEdge);\n  }\n};\n\nClipperLib.Clipper.prototype.GetNextInAEL = function (e, Direction) {\n  return Direction === ClipperLib.Direction.dLeftToRight ? e.NextInAEL : e.PrevInAEL;\n};\n\nClipperLib.Clipper.prototype.IsMinima = function (e) {\n  return e !== null && (e.Prev.NextInLML !== e) && (e.Next.NextInLML !== e);\n};\n\nClipperLib.Clipper.prototype.IsMaxima = function (e, Y) {\n  return (e !== null && e.Top[1] === Y && e.NextInLML === null);\n};\n\nClipperLib.Clipper.prototype.IsIntermediate = function (e, Y) {\n  return (e.Top[1] === Y && e.NextInLML !== null);\n};\n\nClipperLib.Clipper.prototype.GetMaximaPair = function (e) {\n  if ((ClipperLib.FPoint.op_Equality(e.Next.Top, e.Top)) && e.Next.NextInLML === null) {\n    return e.Next;\n  } else {\n    if ((ClipperLib.FPoint.op_Equality(e.Prev.Top, e.Top)) && e.Prev.NextInLML === null) {\n      return e.Prev;\n    } else {\n      return null;\n    }\n  }\n};\n\nClipperLib.Clipper.prototype.GetMaximaPairEx = function (e) {\n  //as above but returns null if MaxPair isn't in AEL (unless it's horizontal)\n  var result = this.GetMaximaPair(e);\n  if (result === null || result.OutIdx === ClipperLib.ClipperBase.Skip ||\n    ((result.NextInAEL === result.PrevInAEL) && !ClipperLib.ClipperBase.IsHorizontal(result))) {\n    return null;\n  }\n  return result;\n};\n\nClipperLib.Clipper.prototype.ProcessIntersections = function (topY) {\n  if (this.m_ActiveEdges === null)\n    return true;\n  try {\n    this.BuildIntersectList(topY);\n    if (this.m_IntersectList.length === 0)\n      return true;\n    if (this.m_IntersectList.length === 1 || this.FixupIntersectionOrder())\n      this.ProcessIntersectList();\n    else\n      return false;\n  } catch ($$e2) {\n    this.m_SortedEdges = null;\n    this.m_IntersectList.length = 0;\n    ClipperLib.Error(\"ProcessIntersections error\");\n  }\n  this.m_SortedEdges = null;\n  return true;\n};\n\nClipperLib.Clipper.prototype.BuildIntersectList = function (topY) {\n  if (this.m_ActiveEdges === null)\n    return;\n  //prepare for sorting ...\n  var e = this.m_ActiveEdges;\n  //console.log(JSON.stringify(JSON.decycle( e )));\n  this.m_SortedEdges = e;\n  while (e !== null) {\n    e.PrevInSEL = e.PrevInAEL;\n    e.NextInSEL = e.NextInAEL;\n    e.Curr[0] = ClipperLib.Clipper.TopX(e, topY);\n    e = e.NextInAEL;\n  }\n  //bubblesort ...\n  var isModified = true;\n  while (isModified && this.m_SortedEdges !== null) {\n    isModified = false;\n    e = this.m_SortedEdges;\n    while (e.NextInSEL !== null) {\n      var eNext = e.NextInSEL;\n      var pt = new ClipperLib.FPoint0();\n      //console.log(\"e.Curr[0]: \" + e.Curr[0] + \" eNext.Curr[0]\" + eNext.Curr[0]);\n      if (e.Curr[0] > eNext.Curr[0]) {\n        this.IntersectPoint(e, eNext, pt);\n        if (pt[1] < topY) {\n          pt = new ClipperLib.FPoint2(ClipperLib.Clipper.TopX(e, topY), topY);\n        }\n        var newNode = new ClipperLib.IntersectNode();\n        newNode.Edge1 = e;\n        newNode.Edge2 = eNext;\n        //newNode.Pt = pt;\n        newNode.Pt[0] = pt[0];\n        newNode.Pt[1] = pt[1];\n        if (ClipperLib.use_xyz) newNode.Pt.Z = pt.Z;\n        this.m_IntersectList.push(newNode);\n        this.SwapPositionsInSEL(e, eNext);\n        isModified = true;\n      } else\n        e = eNext;\n    }\n    if (e.PrevInSEL !== null)\n      e.PrevInSEL.NextInSEL = null;\n    else\n      break;\n  }\n  this.m_SortedEdges = null;\n};\n\nClipperLib.Clipper.prototype.EdgesAdjacent = function (inode) {\n  return (inode.Edge1.NextInSEL === inode.Edge2) || (inode.Edge1.PrevInSEL === inode.Edge2);\n};\n\nClipperLib.Clipper.IntersectNodeSort = function (node1, node2) {\n  //the following typecast is safe because the differences in Pt[1] will\n  //be limited to the height of the scanbeam.\n  return (node2.Pt[1] - node1.Pt[1]);\n};\n\nClipperLib.Clipper.prototype.FixupIntersectionOrder = function () {\n  //pre-condition: intersections are sorted bottom-most first.\n  //Now it's crucial that intersections are made only between adjacent edges,\n  //so to ensure this the order of intersections may need adjusting ...\n  this.m_IntersectList.sort(this.m_IntersectNodeComparer);\n  this.CopyAELToSEL();\n  var cnt = this.m_IntersectList.length;\n  for (var i = 0; i < cnt; i++) {\n    if (!this.EdgesAdjacent(this.m_IntersectList[i])) {\n      var j = i + 1;\n      while (j < cnt && !this.EdgesAdjacent(this.m_IntersectList[j]))\n        j++;\n      if (j === cnt)\n        return false;\n      var tmp = this.m_IntersectList[i];\n      this.m_IntersectList[i] = this.m_IntersectList[j];\n      this.m_IntersectList[j] = tmp;\n    }\n    this.SwapPositionsInSEL(this.m_IntersectList[i].Edge1, this.m_IntersectList[i].Edge2);\n  }\n  return true;\n};\n\nClipperLib.Clipper.prototype.ProcessIntersectList = function () {\n  for (var i = 0, ilen = this.m_IntersectList.length; i < ilen; i++) {\n    var iNode = this.m_IntersectList[i];\n    this.IntersectEdges(iNode.Edge1, iNode.Edge2, iNode.Pt);\n    this.SwapPositionsInAEL(iNode.Edge1, iNode.Edge2);\n  }\n  this.m_IntersectList.length = 0;\n};\n\nClipperLib.Clipper.TopX = function (edge, currentY) {\n  //if (edge.Bot == edge.Curr) alert (\"edge.Bot = edge.Curr\");\n  //if (edge.Bot == edge.Top) alert (\"edge.Bot = edge.Top\");\n  if (currentY === edge.Top[1])\n    return edge.Top[0];\n  return edge.Bot[0] + edge.Dx * (currentY - edge.Bot[1]);\n};\n\nClipperLib.Clipper.prototype.IntersectPoint = function (edge1, edge2, ip) {\n  ip[0] = 0;\n  ip[1] = 0;\n  var b1, b2;\n  //nb: with very large coordinate values, it's possible for SlopesEqual() to\n  //return false but for the edge.Dx value be equal due to double precision rounding.\n  if (edge1.Dx === edge2.Dx) {\n    ip[1] = edge1.Curr[1];\n    ip[0] = ClipperLib.Clipper.TopX(edge1, ip[1]);\n    return;\n  }\n  if (edge1.Delta[0] === 0) {\n    ip[0] = edge1.Bot[0];\n    if (ClipperLib.ClipperBase.IsHorizontal(edge2)) {\n      ip[1] = edge2.Bot[1];\n    } else {\n      b2 = edge2.Bot[1] - (edge2.Bot[0] / edge2.Dx);\n      ip[1] = ip[0] / edge2.Dx + b2;\n    }\n  } else if (edge2.Delta[0] === 0) {\n    ip[0] = edge2.Bot[0];\n    if (ClipperLib.ClipperBase.IsHorizontal(edge1)) {\n      ip[1] = edge1.Bot[1];\n    } else {\n      b1 = edge1.Bot[1] - (edge1.Bot[0] / edge1.Dx);\n      ip[1] = ip[0] / edge1.Dx + b1;\n    }\n  } else {\n    b1 = edge1.Bot[0] - edge1.Bot[1] * edge1.Dx;\n    b2 = edge2.Bot[0] - edge2.Bot[1] * edge2.Dx;\n    var q = (b2 - b1) / (edge1.Dx - edge2.Dx);\n    ip[1] = q;\n    if (Math.abs(edge1.Dx) < Math.abs(edge2.Dx))\n      ip[0] = edge1.Dx * q + b1;\n    else\n      ip[0] = edge2.Dx * q + b2;\n  }\n  if (ip[1] < edge1.Top[1] || ip[1] < edge2.Top[1]) {\n    if (edge1.Top[1] > edge2.Top[1]) {\n      ip[1] = edge1.Top[1];\n      ip[0] = ClipperLib.Clipper.TopX(edge2, edge1.Top[1]);\n      return ip[0] < edge1.Top[0];\n    } else\n      ip[1] = edge2.Top[1];\n    if (Math.abs(edge1.Dx) < Math.abs(edge2.Dx))\n      ip[0] = ClipperLib.Clipper.TopX(edge1, ip[1]);\n    else\n      ip[0] = ClipperLib.Clipper.TopX(edge2, ip[1]);\n  }\n  //finally, don't allow 'ip' to be BELOW curr[1] (ie bottom of scanbeam) ...\n  if (ip[1] > edge1.Curr[1]) {\n    ip[1] = edge1.Curr[1];\n    //better to use the more vertical edge to derive X ...\n    if (Math.abs(edge1.Dx) > Math.abs(edge2.Dx))\n      ip[0] = ClipperLib.Clipper.TopX(edge2, ip[1]);\n    else\n      ip[0] = ClipperLib.Clipper.TopX(edge1, ip[1]);\n  }\n};\n\nClipperLib.Clipper.prototype.ProcessEdgesAtTopOfScanbeam = function (topY) {\n  var e = this.m_ActiveEdges;\n\n  while (e !== null) {\n    //1. process maxima, treating them as if they're 'bent' horizontal edges,\n    //   but exclude maxima with horizontal edges. nb: e can't be a horizontal.\n    var IsMaximaEdge = this.IsMaxima(e, topY);\n    if (IsMaximaEdge) {\n      var eMaxPair = this.GetMaximaPairEx(e);\n      IsMaximaEdge = (eMaxPair === null || !ClipperLib.ClipperBase.IsHorizontal(eMaxPair));\n    }\n    if (IsMaximaEdge) {\n      if (this.StrictlySimple) {\n        this.InsertMaxima(e.Top[0]);\n      }\n      var ePrev = e.PrevInAEL;\n      this.DoMaxima(e);\n      if (ePrev === null)\n        e = this.m_ActiveEdges;\n      else\n        e = ePrev.NextInAEL;\n    } else {\n      //2. promote horizontal edges, otherwise update Curr[0] and Curr[1] ...\n      if (this.IsIntermediate(e, topY) && ClipperLib.ClipperBase.IsHorizontal(e.NextInLML)) {\n        e = this.UpdateEdgeIntoAEL(e);\n        if (e.OutIdx >= 0)\n          this.AddOutPt(e, e.Bot);\n        this.AddEdgeToSEL(e);\n      } else {\n        e.Curr[0] = ClipperLib.Clipper.TopX(e, topY);\n        e.Curr[1] = topY;\n      }\n\n      if (ClipperLib.use_xyz) {\n        if (e.Top[1] === topY) e.Curr.Z = e.Top.Z;\n        else if (e.Bot[1] === topY) e.Curr.Z = e.Bot.Z;\n        else e.Curr.Z = 0;\n      }\n\n      //When StrictlySimple and 'e' is being touched by another edge, then\n      //make sure both edges have a vertex here ...\n      if (this.StrictlySimple) {\n        var ePrev = e.PrevInAEL;\n        if ((e.OutIdx >= 0) && (e.WindDelta !== 0) && ePrev !== null &&\n          (ePrev.OutIdx >= 0) && (ePrev.Curr[0] === e.Curr[0]) &&\n          (ePrev.WindDelta !== 0)) {\n          var ip = new ClipperLib.FPoint1(e.Curr);\n\n          if (ClipperLib.use_xyz) {\n            this.SetZ(ip, ePrev, e);\n          }\n\n          var op = this.AddOutPt(ePrev, ip);\n          var op2 = this.AddOutPt(e, ip);\n          this.AddJoin(op, op2, ip); //StrictlySimple (type-3) join\n        }\n      }\n      e = e.NextInAEL;\n    }\n  }\n  //3. Process horizontals at the Top of the scanbeam ...\n  this.ProcessHorizontals();\n  this.m_Maxima = null;\n  //4. Promote intermediate vertices ...\n  e = this.m_ActiveEdges;\n  while (e !== null) {\n    if (this.IsIntermediate(e, topY)) {\n      var op = null;\n      if (e.OutIdx >= 0)\n        op = this.AddOutPt(e, e.Top);\n      e = this.UpdateEdgeIntoAEL(e);\n      //if output polygons share an edge, they'll need joining later ...\n      var ePrev = e.PrevInAEL;\n      var eNext = e.NextInAEL;\n\n      if (ePrev !== null && ePrev.Curr[0] === e.Bot[0] && ePrev.Curr[1] === e.Bot[1] && op !== null && ePrev.OutIdx >= 0 && ePrev.Curr[1] === ePrev.Top[1] && ClipperLib.ClipperBase.SlopesEqual5(e.Curr, e.Top, ePrev.Curr, ePrev.Top) && (e.WindDelta !== 0) && (ePrev.WindDelta !== 0)) {\n        var op2 = this.AddOutPt(ePrev2, e.Bot);\n        this.AddJoin(op, op2, e.Top);\n      } else if (eNext !== null && eNext.Curr[0] === e.Bot[0] && eNext.Curr[1] === e.Bot[1] && op !== null && eNext.OutIdx >= 0 && eNext.Curr[1] === eNext.Top[1] && ClipperLib.ClipperBase.SlopesEqual5(e.Curr, e.Top, eNext.Curr, eNext.Top) && (e.WindDelta !== 0) && (eNext.WindDelta !== 0)) {\n        var op2 = this.AddOutPt(eNext, e.Bot);\n        this.AddJoin(op, op2, e.Top);\n      }\n    }\n    e = e.NextInAEL;\n  }\n};\n\nClipperLib.Clipper.prototype.DoMaxima = function (e) {\n  var eMaxPair = this.GetMaximaPairEx(e);\n  if (eMaxPair === null) {\n    if (e.OutIdx >= 0)\n      this.AddOutPt(e, e.Top);\n    this.DeleteFromAEL(e);\n    return;\n  }\n  var eNext = e.NextInAEL;\n  while (eNext !== null && eNext !== eMaxPair) {\n    this.IntersectEdges(e, eNext, e.Top);\n    this.SwapPositionsInAEL(e, eNext);\n    eNext = e.NextInAEL;\n  }\n  if (e.OutIdx === -1 && eMaxPair.OutIdx === -1) {\n    this.DeleteFromAEL(e);\n    this.DeleteFromAEL(eMaxPair);\n  } else if (e.OutIdx >= 0 && eMaxPair.OutIdx >= 0) {\n    if (e.OutIdx >= 0) this.AddLocalMaxPoly(e, eMaxPair, e.Top);\n    this.DeleteFromAEL(e);\n    this.DeleteFromAEL(eMaxPair);\n  } else if (ClipperLib.use_lines && e.WindDelta === 0) {\n    if (e.OutIdx >= 0) {\n      this.AddOutPt(e, e.Top);\n      e.OutIdx = ClipperLib.ClipperBase.Unassigned;\n    }\n    this.DeleteFromAEL(e);\n    if (eMaxPair.OutIdx >= 0) {\n      this.AddOutPt(eMaxPair, e.Top);\n      eMaxPair.OutIdx = ClipperLib.ClipperBase.Unassigned;\n    }\n    this.DeleteFromAEL(eMaxPair);\n  } else\n    ClipperLib.Error(\"DoMaxima error\");\n};\n\nClipperLib.Clipper.ReversePaths = function (polys) {\n  for (var i = 0, len = polys.length; i < len; i++)\n    polys[i].reverse();\n};\n\nClipperLib.Clipper.Orientation = function (poly) {\n  return ClipperLib.Clipper.Area(poly) >= 0;\n};\n\nClipperLib.Clipper.prototype.PointCount = function (pts) {\n  if (pts === null)\n    return 0;\n  var result = 0;\n  var p = pts;\n  do {\n    result++;\n    p = p.Next;\n  }\n  while (p !== pts)\n  return result;\n};\n\nClipperLib.Clipper.prototype.BuildResult = function (polyg) {\n  ClipperLib.Clear(polyg);\n  for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++) {\n    var outRec = this.m_PolyOuts[i];\n    if (outRec.Pts === null)\n      continue;\n    var p = outRec.Pts.Prev;\n    var cnt = this.PointCount(p);\n    if (cnt < 2)\n      continue;\n    var pg = new Array(cnt);\n    for (var j = 0; j < cnt; j++) {\n      pg[j] = p.Pt;\n      p = p.Prev;\n    }\n    polyg.push(pg);\n  }\n};\n\nClipperLib.Clipper.prototype.BuildResult2 = function (polytree) {\n  polytree.Clear();\n  //add each output polygon/contour to polytree ...\n  //polytree.m_AllPolys.set_Capacity(this.m_PolyOuts.length);\n  for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++) {\n    var outRec = this.m_PolyOuts[i];\n    var cnt = this.PointCount(outRec.Pts);\n    if ((outRec.IsOpen && cnt < 2) || (!outRec.IsOpen && cnt < 3))\n      continue;\n    this.FixHoleLinkage(outRec);\n    var pn = new ClipperLib.PolyNode();\n    polytree.m_AllPolys.push(pn);\n    outRec.PolyNode = pn;\n    pn.m_polygon.length = cnt;\n    var op = outRec.Pts.Prev;\n    for (var j = 0; j < cnt; j++) {\n      pn.m_polygon[j] = op.Pt;\n      op = op.Prev;\n    }\n  }\n  //fixup PolyNode links etc ...\n  //polytree.m_Childs.set_Capacity(this.m_PolyOuts.length);\n  for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++) {\n    var outRec = this.m_PolyOuts[i];\n    if (outRec.PolyNode === null)\n      continue;\n    else if (outRec.IsOpen) {\n      outRec.PolyNode.IsOpen = true;\n      polytree.AddChild(outRec.PolyNode);\n    } else if (outRec.FirstLeft !== null && outRec.FirstLeft.PolyNode !== null)\n      outRec.FirstLeft.PolyNode.AddChild(outRec.PolyNode);\n    else\n      polytree.AddChild(outRec.PolyNode);\n  }\n};\n\nClipperLib.Clipper.prototype.FixupOutPolyline = function (outRec) {\n  var pp = outRec.Pts;\n  var lastPP = pp.Prev;\n  while (pp !== lastPP) {\n    pp = pp.Next;\n    if (ClipperLib.FPoint.op_Equality(pp.Pt, pp.Prev.Pt)) {\n      if (pp === lastPP) {\n        lastPP = pp.Prev;\n      }\n      var tmpPP = pp.Prev;\n      tmpPP.Next = pp.Next;\n      pp.Next.Prev = tmpPP;\n      pp = tmpPP;\n    }\n  }\n  if (pp === pp.Prev) {\n    outRec.Pts = null;\n  }\n};\n\nClipperLib.Clipper.prototype.FixupOutPolygon = function (outRec) {\n  //FixupOutPolygon() - removes duplicate points and simplifies consecutive\n  //parallel edges by removing the middle vertex.\n  var lastOK = null;\n  outRec.BottomPt = null;\n  var pp = outRec.Pts;\n  var preserveCol = this.PreserveCollinear || this.StrictlySimple;\n  for (;;) {\n    if (pp.Prev === pp || pp.Prev === pp.Next) {\n      outRec.Pts = null;\n      return;\n    }\n\n    //test for duplicate points and collinear edges ...\n    if ((ClipperLib.FPoint.op_Equality(pp.Pt, pp.Next.Pt)) || (ClipperLib.FPoint.op_Equality(pp.Pt, pp.Prev.Pt)) || (ClipperLib.ClipperBase.SlopesEqual4(pp.Prev.Pt, pp.Pt, pp.Next.Pt) && (!preserveCol || !this.Pt2IsBetweenPt1AndPt3(pp.Prev.Pt, pp.Pt, pp.Next.Pt)))) {\n      lastOK = null;\n      pp.Prev.Next = pp.Next;\n      pp.Next.Prev = pp.Prev;\n      pp = pp.Prev;\n    } else if (pp === lastOK)\n      break;\n    else {\n      if (lastOK === null)\n        lastOK = pp;\n      pp = pp.Next;\n    }\n  }\n  outRec.Pts = pp;\n};\n\nClipperLib.Clipper.prototype.DupOutPt = function (outPt, InsertAfter) {\n  var result = new ClipperLib.OutPt();\n  //result.Pt = outPt.Pt;\n  result.Pt[0] = outPt.Pt[0];\n  result.Pt[1] = outPt.Pt[1];\n  if (ClipperLib.use_xyz) result.Pt.Z = outPt.Pt.Z;\n  result.Idx = outPt.Idx;\n  if (InsertAfter) {\n    result.Next = outPt.Next;\n    result.Prev = outPt;\n    outPt.Next.Prev = result;\n    outPt.Next = result;\n  } else {\n    result.Prev = outPt.Prev;\n    result.Next = outPt;\n    outPt.Prev.Next = result;\n    outPt.Prev = result;\n  }\n  return result;\n};\n\nClipperLib.Clipper.prototype.GetOverlap = function (a1, a2, b1, b2, $val) {\n  if (a1 < a2) {\n    if (b1 < b2) {\n      $val.Left = Math.max(a1, b1);\n      $val.Right = Math.min(a2, b2);\n    } else {\n      $val.Left = Math.max(a1, b2);\n      $val.Right = Math.min(a2, b1);\n    }\n  } else {\n    if (b1 < b2) {\n      $val.Left = Math.max(a2, b1);\n      $val.Right = Math.min(a1, b2);\n    } else {\n      $val.Left = Math.max(a2, b2);\n      $val.Right = Math.min(a1, b1);\n    }\n  }\n  return $val.Left < $val.Right;\n};\n\nClipperLib.Clipper.prototype.JoinHorz = function (op1, op1b, op2, op2b, Pt, DiscardLeft) {\n  var Dir1 = (op1.Pt[0] > op1b.Pt[0] ? ClipperLib.Direction.dRightToLeft : ClipperLib.Direction.dLeftToRight);\n  var Dir2 = (op2.Pt[0] > op2b.Pt[0] ? ClipperLib.Direction.dRightToLeft : ClipperLib.Direction.dLeftToRight);\n  if (Dir1 === Dir2)\n    return false;\n  //When DiscardLeft, we want Op1b to be on the Left of Op1, otherwise we\n  //want Op1b to be on the Right. (And likewise with Op2 and Op2b.)\n  //So, to facilitate this while inserting Op1b and Op2b ...\n  //when DiscardLeft, make sure we're AT or RIGHT of Pt before adding Op1b,\n  //otherwise make sure we're AT or LEFT of Pt. (Likewise with Op2b.)\n  if (Dir1 === ClipperLib.Direction.dLeftToRight) {\n    while (op1.Next.Pt[0] <= Pt[0] &&\n      op1.Next.Pt[0] >= op1.Pt[0] && op1.Next.Pt[1] === Pt[1])\n      op1 = op1.Next;\n    if (DiscardLeft && (op1.Pt[0] !== Pt[0]))\n      op1 = op1.Next;\n    op1b = this.DupOutPt(op1, !DiscardLeft);\n    if (ClipperLib.FPoint.op_Inequality(op1b.Pt, Pt)) {\n      op1 = op1b;\n      //op1.Pt = Pt;\n      op1.Pt[0] = Pt[0];\n      op1.Pt[1] = Pt[1];\n      if (ClipperLib.use_xyz) op1.Pt.Z = Pt.Z;\n      op1b = this.DupOutPt(op1, !DiscardLeft);\n    }\n  } else {\n    while (op1.Next.Pt[0] >= Pt[0] &&\n      op1.Next.Pt[0] <= op1.Pt[0] && op1.Next.Pt[1] === Pt[1])\n      op1 = op1.Next;\n    if (!DiscardLeft && (op1.Pt[0] !== Pt[0]))\n      op1 = op1.Next;\n    op1b = this.DupOutPt(op1, DiscardLeft);\n    if (ClipperLib.FPoint.op_Inequality(op1b.Pt, Pt)) {\n      op1 = op1b;\n      //op1.Pt = Pt;\n      op1.Pt[0] = Pt[0];\n      op1.Pt[1] = Pt[1];\n      if (ClipperLib.use_xyz) op1.Pt.Z = Pt.Z;\n      op1b = this.DupOutPt(op1, DiscardLeft);\n    }\n  }\n  if (Dir2 === ClipperLib.Direction.dLeftToRight) {\n    while (op2.Next.Pt[0] <= Pt[0] &&\n      op2.Next.Pt[0] >= op2.Pt[0] && op2.Next.Pt[1] === Pt[1])\n      op2 = op2.Next;\n    if (DiscardLeft && (op2.Pt[0] !== Pt[0]))\n      op2 = op2.Next;\n    op2b = this.DupOutPt(op2, !DiscardLeft);\n    if (ClipperLib.FPoint.op_Inequality(op2b.Pt, Pt)) {\n      op2 = op2b;\n      //op2.Pt = Pt;\n      op2.Pt[0] = Pt[0];\n      op2.Pt[1] = Pt[1];\n      if (ClipperLib.use_xyz) op2.Pt.Z = Pt.Z;\n      op2b = this.DupOutPt(op2, !DiscardLeft);\n    }\n  } else {\n    while (op2.Next.Pt[0] >= Pt[0] &&\n      op2.Next.Pt[0] <= op2.Pt[0] && op2.Next.Pt[1] === Pt[1])\n      op2 = op2.Next;\n    if (!DiscardLeft && (op2.Pt[0] !== Pt[0]))\n      op2 = op2.Next;\n    op2b = this.DupOutPt(op2, DiscardLeft);\n    if (ClipperLib.FPoint.op_Inequality(op2b.Pt, Pt)) {\n      op2 = op2b;\n      //op2.Pt = Pt;\n      op2.Pt[0] = Pt[0];\n      op2.Pt[1] = Pt[1];\n      if (ClipperLib.use_xyz) op2.Pt.Z = Pt.Z;\n      op2b = this.DupOutPt(op2, DiscardLeft);\n    }\n  }\n  if ((Dir1 === ClipperLib.Direction.dLeftToRight) === DiscardLeft) {\n    op1.Prev = op2;\n    op2.Next = op1;\n    op1b.Next = op2b;\n    op2b.Prev = op1b;\n  } else {\n    op1.Next = op2;\n    op2.Prev = op1;\n    op1b.Prev = op2b;\n    op2b.Next = op1b;\n  }\n  return true;\n};\n\nClipperLib.Clipper.prototype.JoinPoints = function (j, outRec1, outRec2) {\n  var op1 = j.OutPt1,\n    op1b = new ClipperLib.OutPt();\n  var op2 = j.OutPt2,\n    op2b = new ClipperLib.OutPt();\n  //There are 3 kinds of joins for output polygons ...\n  //1. Horizontal joins where Join.OutPt1 & Join.OutPt2 are vertices anywhere\n  //along (horizontal) collinear edges (& Join.OffPt is on the same horizontal).\n  //2. Non-horizontal joins where Join.OutPt1 & Join.OutPt2 are at the same\n  //location at the Bottom of the overlapping segment (& Join.OffPt is above).\n  //3. StrictlySimple joins where edges touch but are not collinear and where\n  //Join.OutPt1, Join.OutPt2 & Join.OffPt all share the same point.\n  var isHorizontal = (j.OutPt1.Pt[1] === j.OffPt[1]);\n  if (isHorizontal && (ClipperLib.FPoint.op_Equality(j.OffPt, j.OutPt1.Pt)) && (ClipperLib.FPoint.op_Equality(j.OffPt, j.OutPt2.Pt))) {\n    //Strictly Simple join ...\n    if (outRec1 !== outRec2) return false;\n\n    op1b = j.OutPt1.Next;\n    while (op1b !== op1 && (ClipperLib.FPoint.op_Equality(op1b.Pt, j.OffPt)))\n      op1b = op1b.Next;\n    var reverse1 = (op1b.Pt[1] > j.OffPt[1]);\n    op2b = j.OutPt2.Next;\n    while (op2b !== op2 && (ClipperLib.FPoint.op_Equality(op2b.Pt, j.OffPt)))\n      op2b = op2b.Next;\n    var reverse2 = (op2b.Pt[1] > j.OffPt[1]);\n    if (reverse1 === reverse2)\n      return false;\n    if (reverse1) {\n      op1b = this.DupOutPt(op1, false);\n      op2b = this.DupOutPt(op2, true);\n      op1.Prev = op2;\n      op2.Next = op1;\n      op1b.Next = op2b;\n      op2b.Prev = op1b;\n      j.OutPt1 = op1;\n      j.OutPt2 = op1b;\n      return true;\n    } else {\n      op1b = this.DupOutPt(op1, true);\n      op2b = this.DupOutPt(op2, false);\n      op1.Next = op2;\n      op2.Prev = op1;\n      op1b.Prev = op2b;\n      op2b.Next = op1b;\n      j.OutPt1 = op1;\n      j.OutPt2 = op1b;\n      return true;\n    }\n  } else if (isHorizontal) {\n    //treat horizontal joins differently to non-horizontal joins since with\n    //them we're not yet sure where the overlapping is. OutPt1.Pt & OutPt2.Pt\n    //may be anywhere along the horizontal edge.\n    op1b = op1;\n    while (op1.Prev.Pt[1] === op1.Pt[1] && op1.Prev !== op1b && op1.Prev !== op2)\n      op1 = op1.Prev;\n    while (op1b.Next.Pt[1] === op1b.Pt[1] && op1b.Next !== op1 && op1b.Next !== op2)\n      op1b = op1b.Next;\n    if (op1b.Next === op1 || op1b.Next === op2)\n      return false;\n    //a flat 'polygon'\n    op2b = op2;\n    while (op2.Prev.Pt[1] === op2.Pt[1] && op2.Prev !== op2b && op2.Prev !== op1b)\n      op2 = op2.Prev;\n    while (op2b.Next.Pt[1] === op2b.Pt[1] && op2b.Next !== op2 && op2b.Next !== op1)\n      op2b = op2b.Next;\n    if (op2b.Next === op2 || op2b.Next === op1)\n      return false;\n    //a flat 'polygon'\n    //Op1 -. Op1b & Op2 -. Op2b are the extremites of the horizontal edges\n\n    var $val = {\n      Left: null,\n      Right: null\n    };\n\n    if (!this.GetOverlap(op1.Pt[0], op1b.Pt[0], op2.Pt[0], op2b.Pt[0], $val))\n      return false;\n    var Left = $val.Left;\n    var Right = $val.Right;\n\n    //DiscardLeftSide: when overlapping edges are joined, a spike will created\n    //which needs to be cleaned up. However, we don't want Op1 or Op2 caught up\n    //on the discard Side as either may still be needed for other joins ...\n    var Pt = new ClipperLib.FPoint0();\n    var DiscardLeftSide;\n    if (op1.Pt[0] >= Left && op1.Pt[0] <= Right) {\n      //Pt = op1.Pt;\n      Pt[0] = op1.Pt[0];\n      Pt[1] = op1.Pt[1];\n      if (ClipperLib.use_xyz) Pt.Z = op1.Pt.Z;\n      DiscardLeftSide = (op1.Pt[0] > op1b.Pt[0]);\n    } else if (op2.Pt[0] >= Left && op2.Pt[0] <= Right) {\n      //Pt = op2.Pt;\n      Pt[0] = op2.Pt[0];\n      Pt[1] = op2.Pt[1];\n      if (ClipperLib.use_xyz) Pt.Z = op2.Pt.Z;\n      DiscardLeftSide = (op2.Pt[0] > op2b.Pt[0]);\n    } else if (op1b.Pt[0] >= Left && op1b.Pt[0] <= Right) {\n      //Pt = op1b.Pt;\n      Pt[0] = op1b.Pt[0];\n      Pt[1] = op1b.Pt[1];\n      if (ClipperLib.use_xyz) Pt.Z = op1b.Pt.Z;\n      DiscardLeftSide = op1b.Pt[0] > op1.Pt[0];\n    } else {\n      //Pt = op2b.Pt;\n      Pt[0] = op2b.Pt[0];\n      Pt[1] = op2b.Pt[1];\n      if (ClipperLib.use_xyz) Pt.Z = op2b.Pt.Z;\n      DiscardLeftSide = (op2b.Pt[0] > op2.Pt[0]);\n    }\n    j.OutPt1 = op1;\n    j.OutPt2 = op2;\n    return this.JoinHorz(op1, op1b, op2, op2b, Pt, DiscardLeftSide);\n  } else {\n    //nb: For non-horizontal joins ...\n    //    1. Jr.OutPt1.Pt[1] == Jr.OutPt2.Pt[1]\n    //    2. Jr.OutPt1.Pt > Jr.OffPt[1]\n    //make sure the polygons are correctly oriented ...\n    op1b = op1.Next;\n    while ((ClipperLib.FPoint.op_Equality(op1b.Pt, op1.Pt)) && (op1b !== op1))\n      op1b = op1b.Next;\n    var Reverse1 = ((op1b.Pt[1] > op1.Pt[1]) || !ClipperLib.ClipperBase.SlopesEqual4(op1.Pt, op1b.Pt, j.OffPt));\n    if (Reverse1) {\n      op1b = op1.Prev;\n      while ((ClipperLib.FPoint.op_Equality(op1b.Pt, op1.Pt)) && (op1b !== op1))\n        op1b = op1b.Prev;\n\n      if ((op1b.Pt[1] > op1.Pt[1]) || !ClipperLib.ClipperBase.SlopesEqual4(op1.Pt, op1b.Pt, j.OffPt))\n        return false;\n    }\n    op2b = op2.Next;\n    while ((ClipperLib.FPoint.op_Equality(op2b.Pt, op2.Pt)) && (op2b !== op2))\n      op2b = op2b.Next;\n\n    var Reverse2 = ((op2b.Pt[1] > op2.Pt[1]) || !ClipperLib.ClipperBase.SlopesEqual4(op2.Pt, op2b.Pt, j.OffPt));\n    if (Reverse2) {\n      op2b = op2.Prev;\n      while ((ClipperLib.FPoint.op_Equality(op2b.Pt, op2.Pt)) && (op2b !== op2))\n        op2b = op2b.Prev;\n\n      if ((op2b.Pt[1] > op2.Pt[1]) || !ClipperLib.ClipperBase.SlopesEqual4(op2.Pt, op2b.Pt, j.OffPt))\n        return false;\n    }\n    if ((op1b === op1) || (op2b === op2) || (op1b === op2b) ||\n      ((outRec1 === outRec2) && (Reverse1 === Reverse2)))\n      return false;\n    if (Reverse1) {\n      op1b = this.DupOutPt(op1, false);\n      op2b = this.DupOutPt(op2, true);\n      op1.Prev = op2;\n      op2.Next = op1;\n      op1b.Next = op2b;\n      op2b.Prev = op1b;\n      j.OutPt1 = op1;\n      j.OutPt2 = op1b;\n      return true;\n    } else {\n      op1b = this.DupOutPt(op1, true);\n      op2b = this.DupOutPt(op2, false);\n      op1.Next = op2;\n      op2.Prev = op1;\n      op1b.Prev = op2b;\n      op2b.Next = op1b;\n      j.OutPt1 = op1;\n      j.OutPt2 = op1b;\n      return true;\n    }\n  }\n};\n\nClipperLib.Clipper.GetBounds = function (paths) {\n  var i = 0,\n    cnt = paths.length;\n  while (i < cnt && paths[i].length === 0) i++;\n  if (i === cnt) return new ClipperLib.FRect(0, 0, 0, 0);\n  var result = new ClipperLib.FRect();\n  result.left = paths[i][0][0];\n  result.right = result.left;\n  result.top = paths[i][0][1];\n  result.bottom = result.top;\n  for (; i < cnt; i++)\n    for (var j = 0, jlen = paths[i].length; j < jlen; j++) {\n      if (paths[i][j][0] < result.left) result.left = paths[i][j][0];\n      else if (paths[i][j][0] > result.right) result.right = paths[i][j][0];\n      if (paths[i][j][1] < result.top) result.top = paths[i][j][1];\n      else if (paths[i][j][1] > result.bottom) result.bottom = paths[i][j][1];\n    }\n  return result;\n}\nClipperLib.Clipper.prototype.GetBounds2 = function (ops) {\n  var opStart = ops;\n  var result = new ClipperLib.FRect();\n  result.left = ops.Pt[0];\n  result.right = ops.Pt[0];\n  result.top = ops.Pt[1];\n  result.bottom = ops.Pt[1];\n  ops = ops.Next;\n  while (ops !== opStart) {\n    if (ops.Pt[0] < result.left)\n      result.left = ops.Pt[0];\n    if (ops.Pt[0] > result.right)\n      result.right = ops.Pt[0];\n    if (ops.Pt[1] < result.top)\n      result.top = ops.Pt[1];\n    if (ops.Pt[1] > result.bottom)\n      result.bottom = ops.Pt[1];\n    ops = ops.Next;\n  }\n  return result;\n};\n\nClipperLib.Clipper.PointInPolygon = function (pt, path) {\n  //returns 0 if false, +1 if true, -1 if pt ON polygon boundary\n  //See \"The Point in Polygon Problem for Arbitrary Polygons\" by Hormann & Agathos\n  //http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.88.5498&rep=rep1&type=pdf\n  var result = 0,\n    cnt = path.length;\n  if (cnt < 3)\n    return 0;\n  var ip = path[0];\n  for (var i = 1; i <= cnt; ++i) {\n    var ipNext = (i === cnt ? path[0] : path[i]);\n    if (ipNext[1] === pt[1]) {\n      if ((ipNext[0] === pt[0]) || (ip[1] === pt[1] && ((ipNext[0] > pt[0]) === (ip[0] < pt[0]))))\n        return -1;\n    }\n    if ((ip[1] < pt[1]) !== (ipNext[1] < pt[1])) {\n      if (ip[0] >= pt[0]) {\n        if (ipNext[0] > pt[0])\n          result = 1 - result;\n        else {\n          var d = (ip[0] - pt[0]) * (ipNext[1] - pt[1]) - (ipNext[0] - pt[0]) * (ip[1] - pt[1]);\n          if (d === 0)\n            return -1;\n          else if ((d > 0) === (ipNext[1] > ip[1]))\n            result = 1 - result;\n        }\n      } else {\n        if (ipNext[0] > pt[0]) {\n          var d = (ip[0] - pt[0]) * (ipNext[1] - pt[1]) - (ipNext[0] - pt[0]) * (ip[1] - pt[1]);\n          if (d === 0)\n            return -1;\n          else if ((d > 0) === (ipNext[1] > ip[1]))\n            result = 1 - result;\n        }\n      }\n    }\n    ip = ipNext;\n  }\n  return result;\n};\n\nClipperLib.Clipper.prototype.PointInPolygon = function (pt, op) {\n  //returns 0 if false, +1 if true, -1 if pt ON polygon boundary\n  var result = 0;\n  var startOp = op;\n  var ptx = pt[0],\n    pty = pt[1];\n  var poly0x = op.Pt[0],\n    poly0y = op.Pt[1];\n  do {\n    op = op.Next;\n    var poly1x = op.Pt[0],\n      poly1y = op.Pt[1];\n    if (poly1y === pty) {\n      if ((poly1x === ptx) || (poly0y === pty && ((poly1x > ptx) === (poly0x < ptx))))\n        return -1;\n    }\n    if ((poly0y < pty) !== (poly1y < pty)) {\n      if (poly0x >= ptx) {\n        if (poly1x > ptx)\n          result = 1 - result;\n        else {\n          var d = (poly0x - ptx) * (poly1y - pty) - (poly1x - ptx) * (poly0y - pty);\n          if (d === 0)\n            return -1;\n          if ((d > 0) === (poly1y > poly0y))\n            result = 1 - result;\n        }\n      } else {\n        if (poly1x > ptx) {\n          var d = (poly0x - ptx) * (poly1y - pty) - (poly1x - ptx) * (poly0y - pty);\n          if (d === 0)\n            return -1;\n          if ((d > 0) === (poly1y > poly0y))\n            result = 1 - result;\n        }\n      }\n    }\n    poly0x = poly1x;\n    poly0y = poly1y;\n  } while (startOp !== op);\n\n  return result;\n};\n\nClipperLib.Clipper.prototype.Poly2ContainsPoly1 = function (outPt1, outPt2) {\n  var op = outPt1;\n  do {\n    //nb: PointInPolygon returns 0 if false, +1 if true, -1 if pt on polygon\n    var res = this.PointInPolygon(op.Pt, outPt2);\n    if (res >= 0)\n      return res > 0;\n    op = op.Next;\n  }\n  while (op !== outPt1)\n  return true;\n};\n\nClipperLib.Clipper.prototype.FixupFirstLefts1 = function (OldOutRec, NewOutRec) {\n  var outRec, firstLeft;\n  for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++) {\n    outRec = this.m_PolyOuts[i];\n    firstLeft = ClipperLib.Clipper.ParseFirstLeft(outRec.FirstLeft);\n    if (outRec.Pts !== null && firstLeft === OldOutRec) {\n      if (this.Poly2ContainsPoly1(outRec.Pts, NewOutRec.Pts))\n        outRec.FirstLeft = NewOutRec;\n    }\n  }\n}\n\nClipperLib.Clipper.prototype.FixupFirstLefts2 = function (innerOutRec, outerOutRec) {\n  //A polygon has split into two such that one is now the inner of the other.\n  //It's possible that these polygons now wrap around other polygons, so check\n  //every polygon that's also contained by OuterOutRec's FirstLeft container\n  //(including nil) to see if they've become inner to the new inner polygon ...\n  var orfl = outerOutRec.FirstLeft;\n  var outRec, firstLeft;\n  for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++) {\n    outRec = this.m_PolyOuts[i];\n    if (outRec.Pts === null || outRec === outerOutRec || outRec === innerOutRec)\n      continue;\n    firstLeft = ClipperLib.Clipper.ParseFirstLeft(outRec.FirstLeft);\n    if (firstLeft !== orfl && firstLeft !== innerOutRec && firstLeft !== outerOutRec)\n      continue;\n    if (this.Poly2ContainsPoly1(outRec.Pts, innerOutRec.Pts))\n      outRec.FirstLeft = innerOutRec;\n    else if (this.Poly2ContainsPoly1(outRec.Pts, outerOutRec.Pts))\n      outRec.FirstLeft = outerOutRec;\n    else if (outRec.FirstLeft === innerOutRec || outRec.FirstLeft === outerOutRec)\n      outRec.FirstLeft = orfl;\n  }\n}\n\nClipperLib.Clipper.prototype.FixupFirstLefts3 = function (OldOutRec, NewOutRec) {\n  //same as FixupFirstLefts1 but doesn't call Poly2ContainsPoly1()\n  var outRec;\n  var firstLeft;\n  for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++) {\n    outRec = this.m_PolyOuts[i];\n    firstLeft = ClipperLib.Clipper.ParseFirstLeft(outRec.FirstLeft);\n    if (outRec.Pts !== null && firstLeft === OldOutRec)\n      outRec.FirstLeft = NewOutRec;\n  }\n}\n\nClipperLib.Clipper.ParseFirstLeft = function (FirstLeft) {\n  while (FirstLeft !== null && FirstLeft.Pts === null)\n    FirstLeft = FirstLeft.FirstLeft;\n  return FirstLeft;\n};\n\nClipperLib.Clipper.prototype.JoinCommonEdges = function () {\n  for (var i = 0, ilen = this.m_Joins.length; i < ilen; i++) {\n    var join = this.m_Joins[i];\n    var outRec1 = this.GetOutRec(join.OutPt1.Idx);\n    var outRec2 = this.GetOutRec(join.OutPt2.Idx);\n    if (outRec1.Pts === null || outRec2.Pts === null)\n      continue;\n\n    if (outRec1.IsOpen || outRec2.IsOpen) {\n      continue;\n    }\n\n    //get the polygon fragment with the correct hole state (FirstLeft)\n    //before calling JoinPoints() ...\n    var holeStateRec;\n    if (outRec1 === outRec2)\n      holeStateRec = outRec1;\n    else if (this.OutRec1RightOfOutRec2(outRec1, outRec2))\n      holeStateRec = outRec2;\n    else if (this.OutRec1RightOfOutRec2(outRec2, outRec1))\n      holeStateRec = outRec1;\n    else\n      holeStateRec = this.GetLowermostRec(outRec1, outRec2);\n\n    if (!this.JoinPoints(join, outRec1, outRec2)) continue;\n\n    if (outRec1 === outRec2) {\n      //instead of joining two polygons, we've just created a new one by\n      //splitting one polygon into two.\n      outRec1.Pts = join.OutPt1;\n      outRec1.BottomPt = null;\n      outRec2 = this.CreateOutRec();\n      outRec2.Pts = join.OutPt2;\n      //update all OutRec2.Pts Idx's ...\n      this.UpdateOutPtIdxs(outRec2);\n\n      if (this.Poly2ContainsPoly1(outRec2.Pts, outRec1.Pts)) {\n        //outRec1 contains outRec2 ...\n        outRec2.IsHole = !outRec1.IsHole;\n        outRec2.FirstLeft = outRec1;\n        if (this.m_UsingPolyTree)\n          this.FixupFirstLefts2(outRec2, outRec1);\n        if ((outRec2.IsHole ^ this.ReverseSolution) == (this.Area$1(outRec2) > 0))\n          this.ReversePolyPtLinks(outRec2.Pts);\n      } else if (this.Poly2ContainsPoly1(outRec1.Pts, outRec2.Pts)) {\n        //outRec2 contains outRec1 ...\n        outRec2.IsHole = outRec1.IsHole;\n        outRec1.IsHole = !outRec2.IsHole;\n        outRec2.FirstLeft = outRec1.FirstLeft;\n        outRec1.FirstLeft = outRec2;\n        if (this.m_UsingPolyTree)\n          this.FixupFirstLefts2(outRec1, outRec2);\n\n        if ((outRec1.IsHole ^ this.ReverseSolution) == (this.Area$1(outRec1) > 0))\n          this.ReversePolyPtLinks(outRec1.Pts);\n      } else {\n        //the 2 polygons are completely separate ...\n        outRec2.IsHole = outRec1.IsHole;\n        outRec2.FirstLeft = outRec1.FirstLeft;\n        //fixup FirstLeft pointers that may need reassigning to OutRec2\n        if (this.m_UsingPolyTree)\n          this.FixupFirstLefts1(outRec1, outRec2);\n      }\n    } else {\n      //joined 2 polygons together ...\n      outRec2.Pts = null;\n      outRec2.BottomPt = null;\n      outRec2.Idx = outRec1.Idx;\n      outRec1.IsHole = holeStateRec.IsHole;\n      if (holeStateRec === outRec2)\n        outRec1.FirstLeft = outRec2.FirstLeft;\n      outRec2.FirstLeft = outRec1;\n      //fixup FirstLeft pointers that may need reassigning to OutRec1\n      if (this.m_UsingPolyTree)\n        this.FixupFirstLefts3(outRec2, outRec1);\n    }\n  }\n};\n\nClipperLib.Clipper.prototype.UpdateOutPtIdxs = function (outrec) {\n  var op = outrec.Pts;\n  do {\n    op.Idx = outrec.Idx;\n    op = op.Prev;\n  }\n  while (op !== outrec.Pts)\n};\n\nClipperLib.Clipper.prototype.DoSimplePolygons = function () {\n  var i = 0;\n  while (i < this.m_PolyOuts.length) {\n    var outrec = this.m_PolyOuts[i++];\n    var op = outrec.Pts;\n    if (op === null || outrec.IsOpen)\n      continue;\n    do //for each Pt in Polygon until duplicate found do ...\n    {\n      var op2 = op.Next;\n      while (op2 !== outrec.Pts) {\n        if ((ClipperLib.FPoint.op_Equality(op.Pt, op2.Pt)) && op2.Next !== op && op2.Prev !== op) {\n          //split the polygon into two ...\n          var op3 = op.Prev;\n          var op4 = op2.Prev;\n          op.Prev = op4;\n          op4.Next = op;\n          op2.Prev = op3;\n          op3.Next = op2;\n          outrec.Pts = op;\n          var outrec2 = this.CreateOutRec();\n          outrec2.Pts = op2;\n          this.UpdateOutPtIdxs(outrec2);\n          if (this.Poly2ContainsPoly1(outrec2.Pts, outrec.Pts)) {\n            //OutRec2 is contained by OutRec1 ...\n            outrec2.IsHole = !outrec.IsHole;\n            outrec2.FirstLeft = outrec;\n            if (this.m_UsingPolyTree) this.FixupFirstLefts2(outrec2, outrec);\n\n          } else if (this.Poly2ContainsPoly1(outrec.Pts, outrec2.Pts)) {\n            //OutRec1 is contained by OutRec2 ...\n            outrec2.IsHole = outrec.IsHole;\n            outrec.IsHole = !outrec2.IsHole;\n            outrec2.FirstLeft = outrec.FirstLeft;\n            outrec.FirstLeft = outrec2;\n            if (this.m_UsingPolyTree) this.FixupFirstLefts2(outrec, outrec2);\n          } else {\n            //the 2 polygons are separate ...\n            outrec2.IsHole = outrec.IsHole;\n            outrec2.FirstLeft = outrec.FirstLeft;\n            if (this.m_UsingPolyTree) this.FixupFirstLefts1(outrec, outrec2);\n          }\n          op2 = op;\n          //ie get ready for the next iteration\n        }\n        op2 = op2.Next;\n      }\n      op = op.Next;\n    }\n    while (op !== outrec.Pts)\n  }\n};\n\nClipperLib.Clipper.Area = function (poly) {\n  if (!Array.isArray(poly))\n    return 0;\n  var cnt = poly.length;\n  if (cnt < 3)\n    return 0;\n  var a = 0;\n  for (var i = 0, j = cnt - 1; i < cnt; ++i) {\n    a += (poly[j][0] + poly[i][0]) * (poly[j][1] - poly[i][1]);\n    j = i;\n  }\n  return -a * 0.5;\n};\n\nClipperLib.Clipper.prototype.Area = function (op) {\n  var opFirst = op;\n  if (op === null) return 0;\n  var a = 0;\n  do {\n    a = a + (op.Prev.Pt[0] + op.Pt[0]) * (op.Prev.Pt[1] - op.Pt[1]);\n    op = op.Next;\n  } while (op !== opFirst); // && typeof op !== 'undefined');\n  return a * 0.5;\n}\n\nClipperLib.Clipper.prototype.Area$1 = function (outRec) {\n  return this.Area(outRec.Pts);\n};\n\nClipperLib.Clipper.SimplifyPolygon = function (poly, fillType) {\n  var result = new Array();\n  var c = new ClipperLib.Clipper(0);\n  c.StrictlySimple = true;\n  c.AddPath(poly, ClipperLib.PolyType.ptSubject, true);\n  c.Execute(ClipperLib.ClipType.ctUnion, result, fillType, fillType);\n  return result;\n};\n\nClipperLib.Clipper.SimplifyPolygons = function (polys, fillType) {\n  if (typeof (fillType) === \"undefined\") fillType = ClipperLib.PolyFillType.pftEvenOdd;\n  var result = new Array();\n  var c = new ClipperLib.Clipper(0);\n  c.StrictlySimple = true;\n  c.AddPaths(polys, ClipperLib.PolyType.ptSubject, true);\n  c.Execute(ClipperLib.ClipType.ctUnion, result, fillType, fillType);\n  return result;\n};\n\nClipperLib.Clipper.DistanceSqrd = function (pt1, pt2) {\n  var dx = (pt1[0] - pt2[0]);\n  var dy = (pt1[1] - pt2[1]);\n  return (dx * dx + dy * dy);\n};\n\nClipperLib.Clipper.DistanceFromLineSqrd = function (pt, ln1, ln2) {\n  //The equation of a line in general form (Ax + By + C = 0)\n  //given 2 points (x¹,y¹) & (x²,y²) is ...\n  //(y¹ - y²)x + (x² - x¹)y + (y² - y¹)x¹ - (x² - x¹)y¹ = 0\n  //A = (y¹ - y²); B = (x² - x¹); C = (y² - y¹)x¹ - (x² - x¹)y¹\n  //perpendicular distance of point (x³,y³) = (Ax³ + By³ + C)/Sqrt(A² + B²)\n  //see http://en.wikipedia.org/wiki/Perpendicular_distance\n  var A = ln1[1] - ln2[1];\n  var B = ln2[0] - ln1[0];\n  var C = A * ln1[0] + B * ln1[1];\n  C = A * pt[0] + B * pt[1] - C;\n  return (C * C) / (A * A + B * B);\n};\n\nClipperLib.Clipper.SlopesNearCollinear = function (pt1, pt2, pt3, distSqrd) {\n  //this function is more accurate when the point that's GEOMETRICALLY\n  //between the other 2 points is the one that's tested for distance.\n  //nb: with 'spikes', either pt1 or pt3 is geometrically between the other pts\n  if (Math.abs(pt1[0] - pt2[0]) > Math.abs(pt1[1] - pt2[1])) {\n    if ((pt1[0] > pt2[0]) === (pt1[0] < pt3[0]))\n      return ClipperLib.Clipper.DistanceFromLineSqrd(pt1, pt2, pt3) < distSqrd;\n    else if ((pt2[0] > pt1[0]) === (pt2[0] < pt3[0]))\n      return ClipperLib.Clipper.DistanceFromLineSqrd(pt2, pt1, pt3) < distSqrd;\n    else\n      return ClipperLib.Clipper.DistanceFromLineSqrd(pt3, pt1, pt2) < distSqrd;\n  } else {\n    if ((pt1[1] > pt2[1]) === (pt1[1] < pt3[1]))\n      return ClipperLib.Clipper.DistanceFromLineSqrd(pt1, pt2, pt3) < distSqrd;\n    else if ((pt2[1] > pt1[1]) === (pt2[1] < pt3[1]))\n      return ClipperLib.Clipper.DistanceFromLineSqrd(pt2, pt1, pt3) < distSqrd;\n    else\n      return ClipperLib.Clipper.DistanceFromLineSqrd(pt3, pt1, pt2) < distSqrd;\n  }\n}\n\nClipperLib.Clipper.PointsAreClose = function (pt1, pt2, distSqrd) {\n  var dx = pt1[0] - pt2[0];\n  var dy = pt1[1] - pt2[1];\n  return ((dx * dx) + (dy * dy) <= distSqrd);\n};\n\nClipperLib.Clipper.ExcludeOp = function (op) {\n  var result = op.Prev;\n  result.Next = op.Next;\n  op.Next.Prev = result;\n  result.Idx = 0;\n  return result;\n};\n\nClipperLib.Clipper.CleanPolygon = function (path, distance) {\n  if (typeof (distance) === \"undefined\") distance = 1.415;\n  //distance = proximity in units/pixels below which vertices will be stripped.\n  //Default ~= sqrt(2) so when adjacent vertices or semi-adjacent vertices have\n  //both x & y coords within 1 unit, then the second vertex will be stripped.\n  var cnt = path.length;\n  if (cnt === 0)\n    return new Array();\n  var outPts = new Array(cnt);\n  for (var i = 0; i < cnt; ++i)\n    outPts[i] = new ClipperLib.OutPt();\n  for (var i = 0; i < cnt; ++i) {\n    outPts[i].Pt = path[i];\n    outPts[i].Next = outPts[(i + 1) % cnt];\n    outPts[i].Next.Prev = outPts[i];\n    outPts[i].Idx = 0;\n  }\n  var distSqrd = distance * distance;\n  var op = outPts[0];\n  while (op.Idx === 0 && op.Next !== op.Prev) {\n    if (ClipperLib.Clipper.PointsAreClose(op.Pt, op.Prev.Pt, distSqrd)) {\n      op = ClipperLib.Clipper.ExcludeOp(op);\n      cnt--;\n    } else if (ClipperLib.Clipper.PointsAreClose(op.Prev.Pt, op.Next.Pt, distSqrd)) {\n      ClipperLib.Clipper.ExcludeOp(op.Next);\n      op = ClipperLib.Clipper.ExcludeOp(op);\n      cnt -= 2;\n    } else if (ClipperLib.Clipper.SlopesNearCollinear(op.Prev.Pt, op.Pt, op.Next.Pt, distSqrd)) {\n      op = ClipperLib.Clipper.ExcludeOp(op);\n      cnt--;\n    } else {\n      op.Idx = 1;\n      op = op.Next;\n    }\n  }\n  if (cnt < 3)\n    cnt = 0;\n  var result = new Array(cnt);\n  for (var i = 0; i < cnt; ++i) {\n    result[i] = new ClipperLib.FPoint1(op.Pt);\n    op = op.Next;\n  }\n  outPts = null;\n  return result;\n};\n\nClipperLib.Clipper.CleanPolygons = function (polys, distance) {\n  var result = new Array(polys.length);\n  for (var i = 0, ilen = polys.length; i < ilen; i++)\n    result[i] = ClipperLib.Clipper.CleanPolygon(polys[i], distance);\n  return result;\n};\n\nClipperLib.Clipper.Minkowski = function (pattern, path, IsSum, IsClosed) {\n  var delta = (IsClosed ? 1 : 0);\n  var polyCnt = pattern.length;\n  var pathCnt = path.length;\n  var result = new Array();\n  if (IsSum)\n    for (var i = 0; i < pathCnt; i++) {\n      var p = new Array(polyCnt);\n      for (var j = 0, jlen = pattern.length, ip = pattern[j]; j < jlen; j++, ip = pattern[j])\n        p[j] = new ClipperLib.FPoint2(path[i][0] + ip[0], path[i][1] + ip[1]);\n      result.push(p);\n    }\n  else\n    for (var i = 0; i < pathCnt; i++) {\n      var p = new Array(polyCnt);\n      for (var j = 0, jlen = pattern.length, ip = pattern[j]; j < jlen; j++, ip = pattern[j])\n        p[j] = new ClipperLib.FPoint2(path[i][0] - ip[0], path[i][1] - ip[1]);\n      result.push(p);\n    }\n  var quads = new Array();\n  for (var i = 0; i < pathCnt - 1 + delta; i++)\n    for (var j = 0; j < polyCnt; j++) {\n      var quad = new Array();\n      quad.push(result[i % pathCnt][j % polyCnt]);\n      quad.push(result[(i + 1) % pathCnt][j % polyCnt]);\n      quad.push(result[(i + 1) % pathCnt][(j + 1) % polyCnt]);\n      quad.push(result[i % pathCnt][(j + 1) % polyCnt]);\n      if (!ClipperLib.Clipper.Orientation(quad))\n        quad.reverse();\n      quads.push(quad);\n    }\n  return quads;\n};\n\nClipperLib.Clipper.MinkowskiSum = function (pattern, path_or_paths, pathIsClosed) {\n  if (!(path_or_paths[0] instanceof Array)) {\n    var path = path_or_paths;\n    var paths = ClipperLib.Clipper.Minkowski(pattern, path, true, pathIsClosed);\n    var c = new ClipperLib.Clipper();\n    c.AddPaths(paths, ClipperLib.PolyType.ptSubject, true);\n    c.Execute(ClipperLib.ClipType.ctUnion, paths, ClipperLib.PolyFillType.pftNonZero, ClipperLib.PolyFillType.pftNonZero);\n    return paths;\n  } else {\n    var paths = path_or_paths;\n    var solution = new ClipperLib.Paths();\n    var c = new ClipperLib.Clipper();\n    for (var i = 0; i < paths.length; ++i) {\n      var tmp = ClipperLib.Clipper.Minkowski(pattern, paths[i], true, pathIsClosed);\n      c.AddPaths(tmp, ClipperLib.PolyType.ptSubject, true);\n      if (pathIsClosed) {\n        var path = ClipperLib.Clipper.TranslatePath(paths[i], pattern[0]);\n        c.AddPath(path, ClipperLib.PolyType.ptClip, true);\n      }\n    }\n    c.Execute(ClipperLib.ClipType.ctUnion, solution,\n      ClipperLib.PolyFillType.pftNonZero, ClipperLib.PolyFillType.pftNonZero);\n    return solution;\n  }\n}\n\nClipperLib.Clipper.TranslatePath = function (path, delta) {\n  var outPath = new ClipperLib.Path();\n  for (var i = 0; i < path.length; i++)\n    outPath.push(new ClipperLib.FPoint2(path[i][0] + delta[0], path[i][1] + delta[1]));\n  return outPath;\n}\n\nClipperLib.Clipper.MinkowskiDiff = function (poly1, poly2) {\n  var paths = ClipperLib.Clipper.Minkowski(poly1, poly2, false, true);\n  var c = new ClipperLib.Clipper();\n  c.AddPaths(paths, ClipperLib.PolyType.ptSubject, true);\n  c.Execute(ClipperLib.ClipType.ctUnion, paths, ClipperLib.PolyFillType.pftNonZero, ClipperLib.PolyFillType.pftNonZero);\n  return paths;\n}\n\nClipperLib.Clipper.PolyTreeToPaths = function (polytree) {\n  var result = new Array();\n  //result.set_Capacity(polytree.get_Total());\n  ClipperLib.Clipper.AddPolyNodeToPaths(polytree, ClipperLib.Clipper.NodeType.ntAny, result);\n  return result;\n};\n\nClipperLib.Clipper.AddPolyNodeToPaths = function (polynode, nt, paths) {\n  var match = true;\n  switch (nt) {\n    case ClipperLib.Clipper.NodeType.ntOpen:\n      return;\n    case ClipperLib.Clipper.NodeType.ntClosed:\n      match = !polynode.IsOpen;\n      break;\n    default:\n      break;\n  }\n  if (polynode.m_polygon.length > 0 && match)\n    paths.push(polynode.m_polygon);\n  for (var $i3 = 0, $t3 = polynode.Childs(), $l3 = $t3.length, pn = $t3[$i3]; $i3 < $l3; $i3++, pn = $t3[$i3])\n    ClipperLib.Clipper.AddPolyNodeToPaths(pn, nt, paths);\n};\n\nClipperLib.Clipper.OpenPathsFromPolyTree = function (polytree) {\n  var result = new ClipperLib.Paths();\n  //result.set_Capacity(polytree.ChildCount());\n  for (var i = 0, ilen = polytree.ChildCount(); i < ilen; i++)\n    if (polytree.Childs()[i].IsOpen)\n      result.push(polytree.Childs()[i].m_polygon);\n  return result;\n};\n\nClipperLib.Clipper.ClosedPathsFromPolyTree = function (polytree) {\n  var result = new ClipperLib.Paths();\n  //result.set_Capacity(polytree.Total());\n  ClipperLib.Clipper.AddPolyNodeToPaths(polytree, ClipperLib.Clipper.NodeType.ntClosed, result);\n  return result;\n};\n\nInherit(ClipperLib.Clipper, ClipperLib.ClipperBase);\nClipperLib.Clipper.NodeType = {\n  ntAny: 0,\n  ntOpen: 1,\n  ntClosed: 2\n};\n\n/**\n * @constructor\n */\nClipperLib.ClipperOffset = function (miterLimit, arcTolerance) {\n  if (typeof (miterLimit) === \"undefined\") miterLimit = 2;\n  if (typeof (arcTolerance) === \"undefined\") arcTolerance = ClipperLib.ClipperOffset.def_arc_tolerance;\n  this.m_destPolys = new ClipperLib.Paths();\n  this.m_srcPoly = new ClipperLib.Path();\n  this.m_destPoly = new ClipperLib.Path();\n  this.m_normals = new Array();\n  this.m_delta = 0;\n  this.m_sinA = 0;\n  this.m_sin = 0;\n  this.m_cos = 0;\n  this.m_miterLim = 0;\n  this.m_StepsPerRad = 0;\n  this.m_lowest = new ClipperLib.FPoint0();\n  this.m_polyNodes = new ClipperLib.PolyNode();\n  this.MiterLimit = miterLimit;\n  this.ArcTolerance = arcTolerance;\n  this.m_lowest[0] = -1;\n};\n\nClipperLib.ClipperOffset.two_pi = 6.28318530717959;\nClipperLib.ClipperOffset.def_arc_tolerance = 0.25;\nClipperLib.ClipperOffset.prototype.Clear = function () {\n  ClipperLib.Clear(this.m_polyNodes.Childs());\n  this.m_lowest[0] = -1;\n};\n\nClipperLib.ClipperOffset.prototype.AddPath = function (path, joinType, endType) {\n  var highI = path.length - 1;\n  if (highI < 0)\n    return;\n  var newNode = new ClipperLib.PolyNode();\n  newNode.m_jointype = joinType;\n  newNode.m_endtype = endType;\n  //strip duplicate points from path and also get index to the lowest point ...\n  if (endType === ClipperLib.EndType.etClosedLine || endType === ClipperLib.EndType.etClosedPolygon)\n    while (highI > 0 && ClipperLib.FPoint.op_Equality(path[0], path[highI]))\n      highI--;\n  //newNode.m_polygon.set_Capacity(highI + 1);\n  newNode.m_polygon.push(path[0]);\n  var j = 0,\n    k = 0;\n  for (var i = 1; i <= highI; i++)\n    if (ClipperLib.FPoint.op_Inequality(newNode.m_polygon[j], path[i])) {\n      j++;\n      newNode.m_polygon.push(path[i]);\n      if (path[i][1] > newNode.m_polygon[k][1] || (path[i][1] === newNode.m_polygon[k][1] && path[i][0] < newNode.m_polygon[k][0]))\n        k = j;\n    }\n  if (endType === ClipperLib.EndType.etClosedPolygon && j < 2) return;\n\n  this.m_polyNodes.AddChild(newNode);\n  //if this path's lowest pt is lower than all the others then update m_lowest\n  if (endType !== ClipperLib.EndType.etClosedPolygon)\n    return;\n  if (this.m_lowest[0] < 0)\n    this.m_lowest = new ClipperLib.FPoint2(this.m_polyNodes.ChildCount() - 1, k);\n  else {\n    var ip = this.m_polyNodes.Childs()[this.m_lowest[0]].m_polygon[this.m_lowest[1]];\n    if (newNode.m_polygon[k][1] > ip[1] || (newNode.m_polygon[k][1] === ip[1] && newNode.m_polygon[k][0] < ip[0]))\n      this.m_lowest = new ClipperLib.FPoint2(this.m_polyNodes.ChildCount() - 1, k);\n  }\n};\n\nClipperLib.ClipperOffset.prototype.AddPaths = function (paths, joinType, endType) {\n  for (var i = 0, ilen = paths.length; i < ilen; i++)\n    this.AddPath(paths[i], joinType, endType);\n};\n\nClipperLib.ClipperOffset.prototype.FixOrientations = function () {\n  //fixup orientations of all closed paths if the orientation of the\n  //closed path with the lowermost vertex is wrong ...\n  if (this.m_lowest[0] >= 0 && !ClipperLib.Clipper.Orientation(this.m_polyNodes.Childs()[this.m_lowest[0]].m_polygon)) {\n    for (var i = 0; i < this.m_polyNodes.ChildCount(); i++) {\n      var node = this.m_polyNodes.Childs()[i];\n      if (node.m_endtype === ClipperLib.EndType.etClosedPolygon || (node.m_endtype === ClipperLib.EndType.etClosedLine && ClipperLib.Clipper.Orientation(node.m_polygon)))\n        node.m_polygon.reverse();\n    }\n  } else {\n    for (var i = 0; i < this.m_polyNodes.ChildCount(); i++) {\n      var node = this.m_polyNodes.Childs()[i];\n      if (node.m_endtype === ClipperLib.EndType.etClosedLine && !ClipperLib.Clipper.Orientation(node.m_polygon))\n        node.m_polygon.reverse();\n    }\n  }\n};\n\nClipperLib.ClipperOffset.GetUnitNormal = function (pt1, pt2) {\n  var dx = (pt2[0] - pt1[0]);\n  var dy = (pt2[1] - pt1[1]);\n  if ((dx === 0) && (dy === 0))\n    return new ClipperLib.FPoint2(0, 0);\n  var f = 1 / Math.sqrt(dx * dx + dy * dy);\n  dx *= f;\n  dy *= f;\n  return new ClipperLib.FPoint2(dy, -dx);\n};\n\nClipperLib.ClipperOffset.prototype.DoOffset = function (delta) {\n  this.m_destPolys = new Array();\n  this.m_delta = delta;\n  //if Zero offset, just copy any CLOSED polygons to m_p and return ...\n  if (ClipperLib.ClipperBase.near_zero(delta)) {\n    //this.m_destPolys.set_Capacity(this.m_polyNodes.ChildCount);\n    for (var i = 0; i < this.m_polyNodes.ChildCount(); i++) {\n      var node = this.m_polyNodes.Childs()[i];\n      if (node.m_endtype === ClipperLib.EndType.etClosedPolygon)\n        this.m_destPolys.push(node.m_polygon);\n    }\n    return;\n  }\n  //see offset_triginometry3.svg in the documentation folder ...\n  if (this.MiterLimit > 2)\n    this.m_miterLim = 2 / (this.MiterLimit * this.MiterLimit);\n  else\n    this.m_miterLim = 0.5;\n  var y;\n  if (this.ArcTolerance <= 0)\n    y = ClipperLib.ClipperOffset.def_arc_tolerance;\n  else if (this.ArcTolerance > Math.abs(delta) * ClipperLib.ClipperOffset.def_arc_tolerance)\n    y = Math.abs(delta) * ClipperLib.ClipperOffset.def_arc_tolerance;\n  else\n    y = this.ArcTolerance;\n  //see offset_triginometry2.svg in the documentation folder ...\n  var steps = 3.14159265358979 / Math.acos(1 - y / Math.abs(delta));\n  this.m_sin = Math.sin(ClipperLib.ClipperOffset.two_pi / steps);\n  this.m_cos = Math.cos(ClipperLib.ClipperOffset.two_pi / steps);\n  this.m_StepsPerRad = steps / ClipperLib.ClipperOffset.two_pi;\n  if (delta < 0)\n    this.m_sin = -this.m_sin;\n  //this.m_destPolys.set_Capacity(this.m_polyNodes.ChildCount * 2);\n  for (var i = 0; i < this.m_polyNodes.ChildCount(); i++) {\n    var node = this.m_polyNodes.Childs()[i];\n    this.m_srcPoly = node.m_polygon;\n    var len = this.m_srcPoly.length;\n    if (len === 0 || (delta <= 0 && (len < 3 || node.m_endtype !== ClipperLib.EndType.etClosedPolygon)))\n      continue;\n    this.m_destPoly = new Array();\n    if (len === 1) {\n      if (node.m_jointype === ClipperLib.JoinType.jtRound) {\n        var X = 1,\n          Y = 0;\n        for (var j = 1; j <= steps; j++) {\n          this.m_destPoly.push(new ClipperLib.FPoint2(this.m_srcPoly[0][0] + X * delta, this.m_srcPoly[0][1] + Y * delta));\n          var X2 = X;\n          X = X * this.m_cos - this.m_sin * Y;\n          Y = X2 * this.m_sin + Y * this.m_cos;\n        }\n      } else {\n        var X = -1,\n          Y = -1;\n        for (var j = 0; j < 4; ++j) {\n          this.m_destPoly.push(new ClipperLib.FPoint2(this.m_srcPoly[0][0] + X * delta, this.m_srcPoly[0][1] + Y * delta));\n          if (X < 0)\n            X = 1;\n          else if (Y < 0)\n            Y = 1;\n          else\n            X = -1;\n        }\n      }\n      this.m_destPolys.push(this.m_destPoly);\n      continue;\n    }\n    //build m_normals ...\n    this.m_normals.length = 0;\n    //this.m_normals.set_Capacity(len);\n    for (var j = 0; j < len - 1; j++)\n      this.m_normals.push(ClipperLib.ClipperOffset.GetUnitNormal(this.m_srcPoly[j], this.m_srcPoly[j + 1]));\n    if (node.m_endtype === ClipperLib.EndType.etClosedLine || node.m_endtype === ClipperLib.EndType.etClosedPolygon)\n      this.m_normals.push(ClipperLib.ClipperOffset.GetUnitNormal(this.m_srcPoly[len - 1], this.m_srcPoly[0]));\n    else\n      this.m_normals.push(new ClipperLib.FPoint1(this.m_normals[len - 2]));\n    if (node.m_endtype === ClipperLib.EndType.etClosedPolygon) {\n      var k = len - 1;\n      for (var j = 0; j < len; j++)\n        k = this.OffsetPoint(j, k, node.m_jointype);\n      this.m_destPolys.push(this.m_destPoly);\n    } else if (node.m_endtype === ClipperLib.EndType.etClosedLine) {\n      var k = len - 1;\n      for (var j = 0; j < len; j++)\n        k = this.OffsetPoint(j, k, node.m_jointype);\n      this.m_destPolys.push(this.m_destPoly);\n      this.m_destPoly = new Array();\n      //re-build m_normals ...\n      var n = this.m_normals[len - 1];\n      for (var j = len - 1; j > 0; j--)\n        this.m_normals[j] = new ClipperLib.FPoint2(-this.m_normals[j - 1][0], -this.m_normals[j - 1][1]);\n      this.m_normals[0] = new ClipperLib.FPoint2(-n[0], -n[1]);\n      k = 0;\n      for (var j = len - 1; j >= 0; j--)\n        k = this.OffsetPoint(j, k, node.m_jointype);\n      this.m_destPolys.push(this.m_destPoly);\n    } else {\n      var k = 0;\n      for (var j = 1; j < len - 1; ++j)\n        k = this.OffsetPoint(j, k, node.m_jointype);\n      var pt1;\n      if (node.m_endtype === ClipperLib.EndType.etOpenButt) {\n        var j = len - 1;\n        pt1 = new ClipperLib.FPoint2(this.m_srcPoly[j][0] + this.m_normals[j][0] * delta, this.m_srcPoly[j][1] + this.m_normals[j][1] * delta);\n        this.m_destPoly.push(pt1);\n        pt1 = new ClipperLib.FPoint2(this.m_srcPoly[j][0] - this.m_normals[j][0] * delta, this.m_srcPoly[j][1] - this.m_normals[j][1] * delta);\n        this.m_destPoly.push(pt1);\n      } else {\n        var j = len - 1;\n        k = len - 2;\n        this.m_sinA = 0;\n        this.m_normals[j] = new ClipperLib.FPoint2(-this.m_normals[j][0], -this.m_normals[j][1]);\n        if (node.m_endtype === ClipperLib.EndType.etOpenSquare)\n          this.DoSquare(j, k);\n        else\n          this.DoRound(j, k);\n      }\n      //re-build m_normals ...\n      for (var j = len - 1; j > 0; j--)\n        this.m_normals[j] = new ClipperLib.FPoint2(-this.m_normals[j - 1][0], -this.m_normals[j - 1][1]);\n      this.m_normals[0] = new ClipperLib.FPoint2(-this.m_normals[1][0], -this.m_normals[1][1]);\n      k = len - 1;\n      for (var j = k - 1; j > 0; --j)\n        k = this.OffsetPoint(j, k, node.m_jointype);\n      if (node.m_endtype === ClipperLib.EndType.etOpenButt) {\n        pt1 = new ClipperLib.FPoint2(this.m_srcPoly[0][0] - this.m_normals[0][0] * delta, this.m_srcPoly[0][1] - this.m_normals[0][1] * delta);\n        this.m_destPoly.push(pt1);\n        pt1 = new ClipperLib.FPoint2(this.m_srcPoly[0][0] + this.m_normals[0][0] * delta, this.m_srcPoly[0][1] + this.m_normals[0][1] * delta);\n        this.m_destPoly.push(pt1);\n      } else {\n        k = 1;\n        this.m_sinA = 0;\n        if (node.m_endtype === ClipperLib.EndType.etOpenSquare)\n          this.DoSquare(0, 1);\n        else\n          this.DoRound(0, 1);\n      }\n      this.m_destPolys.push(this.m_destPoly);\n    }\n  }\n};\n\nClipperLib.ClipperOffset.prototype.Execute = function () {\n  var a = arguments,\n    ispolytree = a[0] instanceof ClipperLib.PolyTree;\n  if (!ispolytree) // function (solution, delta)\n  {\n    var solution = a[0],\n      delta = a[1];\n    ClipperLib.Clear(solution);\n    this.FixOrientations();\n    this.DoOffset(delta);\n    //now clean up 'corners' ...\n    var clpr = new ClipperLib.Clipper(0);\n    clpr.AddPaths(this.m_destPolys, ClipperLib.PolyType.ptSubject, true);\n    if (delta > 0) {\n      clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftPositive, ClipperLib.PolyFillType.pftPositive);\n    } else {\n      var r = ClipperLib.Clipper.GetBounds(this.m_destPolys);\n      var outer = new ClipperLib.Path();\n      outer.push(new ClipperLib.FPoint2(r.left - 10, r.bottom + 10));\n      outer.push(new ClipperLib.FPoint2(r.right + 10, r.bottom + 10));\n      outer.push(new ClipperLib.FPoint2(r.right + 10, r.top - 10));\n      outer.push(new ClipperLib.FPoint2(r.left - 10, r.top - 10));\n      clpr.AddPath(outer, ClipperLib.PolyType.ptSubject, true);\n      clpr.ReverseSolution = true;\n      clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftNegative, ClipperLib.PolyFillType.pftNegative);\n      if (solution.length > 0)\n        solution.splice(0, 1);\n    }\n    //console.log(JSON.stringify(solution));\n  } else // function (polytree, delta)\n  {\n    var solution = a[0],\n      delta = a[1];\n    solution.Clear();\n    this.FixOrientations();\n    this.DoOffset(delta);\n    //now clean up 'corners' ...\n    var clpr = new ClipperLib.Clipper(0);\n    clpr.AddPaths(this.m_destPolys, ClipperLib.PolyType.ptSubject, true);\n    if (delta > 0) {\n      clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftPositive, ClipperLib.PolyFillType.pftPositive);\n    } else {\n      var r = ClipperLib.Clipper.GetBounds(this.m_destPolys);\n      var outer = new ClipperLib.Path();\n      outer.push(new ClipperLib.FPoint2(r.left - 10, r.bottom + 10));\n      outer.push(new ClipperLib.FPoint2(r.right + 10, r.bottom + 10));\n      outer.push(new ClipperLib.FPoint2(r.right + 10, r.top - 10));\n      outer.push(new ClipperLib.FPoint2(r.left - 10, r.top - 10));\n      clpr.AddPath(outer, ClipperLib.PolyType.ptSubject, true);\n      clpr.ReverseSolution = true;\n      clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftNegative, ClipperLib.PolyFillType.pftNegative);\n      //remove the outer PolyNode rectangle ...\n      if (solution.ChildCount() === 1 && solution.Childs()[0].ChildCount() > 0) {\n        var outerNode = solution.Childs()[0];\n        //solution.Childs.set_Capacity(outerNode.ChildCount);\n        solution.Childs()[0] = outerNode.Childs()[0];\n        solution.Childs()[0].m_Parent = solution;\n        for (var i = 1; i < outerNode.ChildCount(); i++)\n          solution.AddChild(outerNode.Childs()[i]);\n      } else\n        solution.Clear();\n    }\n  }\n};\n\nClipperLib.ClipperOffset.prototype.OffsetPoint = function (j, k, jointype) {\n  //cross product ...\n  this.m_sinA = (this.m_normals[k][0] * this.m_normals[j][1] - this.m_normals[j][0] * this.m_normals[k][1]);\n\n  if (this.m_sinA === 0) {\n    return k;\n  } else if (this.m_sinA < 0.00005 && this.m_sinA > -0.00005)\n\n    console.log(this.m_sinA);\n  return k;\n\n\n  if (Math.abs(this.m_sinA * this.m_delta) < 1.0) {\n    //dot product ...\n    var cosA = (this.m_normals[k][0] * this.m_normals[j][0] + this.m_normals[j][1] * this.m_normals[k][1]);\n    if (cosA > 0) // angle ==> 0 degrees\n    {\n      this.m_destPoly.push(new ClipperLib.FPoint2(this.m_srcPoly[j][0] + this.m_normals[k][0] * this.m_delta,\n        this.m_srcPoly[j][1] + this.m_normals[k][1] * this.m_delta));\n      return k;\n    }\n    //else angle ==> 180 degrees\n  } else if (this.m_sinA > 1)\n    this.m_sinA = 1.0;\n  else if (this.m_sinA < -1)\n    this.m_sinA = -1.0;\n  if (this.m_sinA * this.m_delta < 0) {\n    this.m_destPoly.push(new ClipperLib.FPoint2(this.m_srcPoly[j][0] + this.m_normals[k][0] * this.m_delta,\n      this.m_srcPoly[j][1] + this.m_normals[k][1] * this.m_delta));\n    this.m_destPoly.push(new ClipperLib.FPoint1(this.m_srcPoly[j]));\n    this.m_destPoly.push(new ClipperLib.FPoint2(this.m_srcPoly[j][0] + this.m_normals[j][0] * this.m_delta,\n      this.m_srcPoly[j][1] + this.m_normals[j][1] * this.m_delta));\n  } else\n    switch (jointype) {\n      case ClipperLib.JoinType.jtMiter:\n        {\n          var r = 1 + (this.m_normals[j][0] * this.m_normals[k][0] + this.m_normals[j][1] * this.m_normals[k][1]);\n          if (r >= this.m_miterLim)\n            this.DoMiter(j, k, r);\n          else\n            this.DoSquare(j, k);\n          break;\n        }\n      case ClipperLib.JoinType.jtSquare:\n        this.DoSquare(j, k);\n        break;\n      case ClipperLib.JoinType.jtRound:\n        this.DoRound(j, k);\n        break;\n    }\n  k = j;\n  return k;\n};\n\nClipperLib.ClipperOffset.prototype.DoSquare = function (j, k) {\n  var dx = Math.tan(Math.atan2(this.m_sinA,\n    this.m_normals[k][0] * this.m_normals[j][0] + this.m_normals[k][1] * this.m_normals[j][1]) / 4);\n  this.m_destPoly.push(new ClipperLib.FPoint2(\n    this.m_srcPoly[j][0] + this.m_delta * (this.m_normals[k][0] - this.m_normals[k][1] * dx),\n    this.m_srcPoly[j][1] + this.m_delta * (this.m_normals[k][1] + this.m_normals[k][0] * dx)));\n  this.m_destPoly.push(new ClipperLib.FPoint2(\n    this.m_srcPoly[j][0] + this.m_delta * (this.m_normals[j][0] + this.m_normals[j][1] * dx),\n    this.m_srcPoly[j][1] + this.m_delta * (this.m_normals[j][1] - this.m_normals[j][0] * dx)));\n};\n\nClipperLib.ClipperOffset.prototype.DoMiter = function (j, k, r) {\n  var q = this.m_delta / r;\n  this.m_destPoly.push(new ClipperLib.FPoint2(\n    this.m_srcPoly[j][0] + (this.m_normals[k][0] + this.m_normals[j][0]) * q,\n    this.m_srcPoly[j][1] + (this.m_normals[k][1] + this.m_normals[j][1]) * q));\n};\n\nClipperLib.ClipperOffset.prototype.DoRound = function (j, k) {\n  var a = Math.atan2(this.m_sinA,\n    this.m_normals[k][0] * this.m_normals[j][0] + this.m_normals[k][1] * this.m_normals[j][1]);\n\n  var steps = Math.max(Math.round(this.m_StepsPerRad * Math.abs(a)), 1);\n\n  var X = this.m_normals[k][0],\n    Y = this.m_normals[k][1],\n    X2;\n  for (var i = 0; i < steps; ++i) {\n    this.m_destPoly.push(new ClipperLib.FPoint2(\n      this.m_srcPoly[j][0] + X * this.m_delta,\n      this.m_srcPoly[j][1] + Y * this.m_delta));\n    X2 = X;\n    X = X * this.m_cos - this.m_sin * Y;\n    Y = X2 * this.m_sin + Y * this.m_cos;\n  }\n  this.m_destPoly.push(new ClipperLib.FPoint2(\n    this.m_srcPoly[j][0] + this.m_normals[j][0] * this.m_delta,\n    this.m_srcPoly[j][1] + this.m_normals[j][1] * this.m_delta));\n};\n\nClipperLib.Error = function (message) {\n  try {\n    throw new Error(message);\n  } catch (err) {\n    alert(err.message);\n  }\n};\n\n// ---------------------------------------------\n\n// JS extension by Timo 2013\nClipperLib.JS = {};\n\nClipperLib.JS.AreaOfPolygon = function (poly) {\n  return ClipperLib.Clipper.Area(poly);\n};\n\nClipperLib.JS.AreaOfPolygons = function (poly) {\n  var area = 0;\n  for (var i = 0; i < poly.length; i++) {\n    area += ClipperLib.Clipper.Area(poly[i]);\n  }\n  return area;\n};\n\nClipperLib.JS.BoundsOfPath = function (path) {\n  return ClipperLib.JS.BoundsOfPaths([path]);\n};\n\nClipperLib.JS.BoundsOfPaths = function (paths) {\n  var bounds = ClipperLib.Clipper.GetBounds(paths);\n  return bounds;\n};\n\n// Clean() joins vertices that are too near each other\n// and causes distortion to offsetted polygons without cleaning\nClipperLib.JS.Clean = function (polygon, delta) {\n  if (!(polygon instanceof Array)) return [];\n  var isPolygons = polygon[0] instanceof Array;\n  var polygon = ClipperLib.JS.Clone(polygon);\n  if (typeof delta !== \"number\" || delta === null) {\n    ClipperLib.Error(\"Delta is not a number in Clean().\");\n    return polygon;\n  }\n  if (polygon.length === 0 || (polygon.length === 1 && polygon[0].length === 0) || delta < 0) return polygon;\n  if (!isPolygons) polygon = [polygon];\n  var k_length = polygon.length;\n  var len, poly, result, d, p, j, i;\n  var results = [];\n  for (var k = 0; k < k_length; k++) {\n    poly = polygon[k];\n    len = poly.length;\n    if (len === 0) continue;\n    else if (len < 3) {\n      result = poly;\n      results.push(result);\n      continue;\n    }\n    result = poly;\n    d = delta * delta;\n    //d = Math.floor(c_delta * c_delta);\n    p = poly[0];\n    j = 1;\n    for (i = 1; i < len; i++) {\n      if ((poly[i][0] - p[0]) * (poly[i][0] - p[0]) +\n        (poly[i][1] - p[1]) * (poly[i][1] - p[1]) <= d)\n        continue;\n      result[j] = poly[i];\n      p = poly[i];\n      j++;\n    }\n    p = poly[j - 1];\n    if ((poly[0][0] - p[0]) * (poly[0][0] - p[0]) +\n      (poly[0][1] - p[1]) * (poly[0][1] - p[1]) <= d)\n      j--;\n    if (j < len)\n      result.splice(j, len - j);\n    if (result.length) results.push(result);\n  }\n  if (!isPolygons && results.length) results = results[0];\n  else if (!isPolygons && results.length === 0) results = [];\n  else if (isPolygons && results.length === 0) results = [\n    []\n  ];\n  return results;\n}\n// Make deep copy of Polygons or Polygon\n// so that also FPoint objects are cloned and not only referenced\n// This should be the fastest way\nClipperLib.JS.Clone = function (polygon) {\n  if (!(polygon instanceof Array)) return [];\n  if (polygon.length === 0) return [];\n  else if (polygon.length === 1 && polygon[0].length === 0) return [\n    []\n  ];\n  var isPolygons = polygon[0] instanceof Array;\n  if (!isPolygons) polygon = [polygon];\n  var len = polygon.length,\n    plen, i, j, result;\n  var results = new Array(len);\n  for (i = 0; i < len; i++) {\n    plen = polygon[i].length;\n    result = new Array(plen);\n    for (j = 0; j < plen; j++) {\n      result[j] = {\n        X: polygon[i][j][0],\n        Y: polygon[i][j][1]\n      };\n\n    }\n    results[i] = result;\n  }\n  if (!isPolygons) results = results[0];\n  return results;\n};\n\n// Removes points that doesn't affect much to the visual appearance.\n// If middle point is at or under certain distance (tolerance) of the line segment between\n// start and end point, the middle point is removed.\nClipperLib.JS.Lighten = function (polygon, tolerance) {\n  if (!(polygon instanceof Array)) return [];\n  if (typeof tolerance !== \"number\" || tolerance === null) {\n    ClipperLib.Error(\"Tolerance is not a number in Lighten().\")\n    return ClipperLib.JS.Clone(polygon);\n  }\n  if (polygon.length === 0 || (polygon.length === 1 && polygon[0].length === 0) || tolerance < 0) {\n    return ClipperLib.JS.Clone(polygon);\n  }\n  var isPolygons = polygon[0] instanceof Array;\n  if (!isPolygons) polygon = [polygon];\n  var i, j, poly, k, poly2, plen, A, B, P, d, rem, addlast;\n  var bxax, byay, l, ax, ay;\n  var len = polygon.length;\n  var toleranceSq = tolerance * tolerance;\n  var results = [];\n  for (i = 0; i < len; i++) {\n    poly = polygon[i];\n    plen = poly.length;\n    if (plen === 0) continue;\n    for (k = 0; k < 1000000; k++) // could be forever loop, but wiser to restrict max repeat count\n    {\n      poly2 = [];\n      plen = poly.length;\n      // the first have to added to the end, if first and last are not the same\n      // this way we ensure that also the actual last point can be removed if needed\n      if (poly[plen - 1][0] !== poly[0][0] || poly[plen - 1][1] !== poly[0][1]) {\n        addlast = 1;\n        poly.push({\n          X: poly[0][0],\n          Y: poly[0][1]\n        });\n        plen = poly.length;\n      } else addlast = 0;\n      rem = []; // Indexes of removed points\n      for (j = 0; j < plen - 2; j++) {\n        A = poly[j]; // Start point of line segment\n        P = poly[j + 1]; // Middle point. This is the one to be removed.\n        B = poly[j + 2]; // End point of line segment\n        ax = A[0];\n        ay = A[1];\n        bxax = B[0] - ax;\n        byay = B[1] - ay;\n        if (bxax !== 0 || byay !== 0) // To avoid Nan, when A==P && P==B. And to avoid peaks (A==B && A!=P), which have lenght, but not area.\n        {\n          l = ((P[0] - ax) * bxax + (P[1] - ay) * byay) / (bxax * bxax + byay * byay);\n          if (l > 1) {\n            ax = B[0];\n            ay = B[1];\n          } else if (l > 0) {\n            ax += bxax * l;\n            ay += byay * l;\n          }\n        }\n        bxax = P[0] - ax;\n        byay = P[1] - ay;\n        d = bxax * bxax + byay * byay;\n        if (d <= toleranceSq) {\n          rem[j + 1] = 1;\n          j++; // when removed, transfer the pointer to the next one\n        }\n      }\n      // add all unremoved points to poly2\n      poly2.push({\n        X: poly[0][0],\n        Y: poly[0][1]\n      });\n      for (j = 1; j < plen - 1; j++)\n        if (!rem[j]) poly2.push({\n          X: poly[j][0],\n          Y: poly[j][1]\n        });\n      poly2.push({\n        X: poly[plen - 1][0],\n        Y: poly[plen - 1][1]\n      });\n      // if the first point was added to the end, remove it\n      if (addlast) poly.pop();\n      // break, if there was not anymore removed points\n      if (!rem.length) break;\n      // else continue looping using poly2, to check if there are points to remove\n      else poly = poly2;\n    }\n    plen = poly2.length;\n    // remove duplicate from end, if needed\n    if (poly2[plen - 1][0] === poly2[0][0] && poly2[plen - 1][1] === poly2[0][1]) {\n      poly2.pop();\n    }\n    if (poly2.length > 2) // to avoid two-point-polygons\n      results.push(poly2);\n  }\n  if (!isPolygons) {\n    results = results[0];\n  }\n  if (typeof (results) === \"undefined\") {\n    results = [];\n  }\n  return results;\n}\n\nClipperLib.JS.PerimeterOfPath = function (path, closed) {\n  if (typeof (path) === \"undefined\") return 0;\n  var sqrt = Math.sqrt;\n  var perimeter = 0.0;\n  var p1, p2, p1x = 0.0,\n    p1y = 0.0,\n    p2x = 0.0,\n    p2y = 0.0;\n  var j = path.length;\n  if (j < 2) return 0;\n  if (closed) {\n    path[j] = path[0];\n    j++;\n  }\n  while (--j) {\n    p1 = path[j];\n    p1x = p1[0];\n    p1y = p1[1];\n    p2 = path[j - 1];\n    p2x = p2[0];\n    p2y = p2[1];\n    perimeter += sqrt((p1x - p2x) * (p1x - p2x) + (p1y - p2y) * (p1y - p2y));\n  }\n  if (closed) path.pop();\n  return perimeter;\n};\n\nClipperLib.JS.PerimeterOfPaths = function (paths, closed) {\n  var perimeter = 0;\n  for (var i = 0; i < paths.length; i++) {\n    perimeter += ClipperLib.JS.PerimeterOfPath(paths[i], closed);\n  }\n  return perimeter;\n};\n\n/**\n * @constructor\n */\nClipperLib.ExPolygons = function () {\n  return [];\n}\n/**\n * @constructor\n */\nClipperLib.ExPolygon = function () {\n  this.outer = null;\n  this.holes = null;\n};\n\nClipperLib.JS.AddOuterPolyNodeToExPolygons = function (polynode, expolygons) {\n  var ep = new ClipperLib.ExPolygon();\n  ep.outer = polynode.Contour();\n  var childs = polynode.Childs();\n  var ilen = childs.length;\n  ep.holes = new Array(ilen);\n  var node, n, i, j, childs2, jlen;\n  for (i = 0; i < ilen; i++) {\n    node = childs[i];\n    ep.holes[i] = node.Contour();\n    //Add outer polygons contained by (nested within) holes ...\n    for (j = 0, childs2 = node.Childs(), jlen = childs2.length; j < jlen; j++) {\n      n = childs2[j];\n      ClipperLib.JS.AddOuterPolyNodeToExPolygons(n, expolygons);\n    }\n  }\n  expolygons.push(ep);\n};\n\nClipperLib.JS.ExPolygonsToPaths = function (expolygons) {\n  var a, i, alen, ilen;\n  var paths = new ClipperLib.Paths();\n  for (a = 0, alen = expolygons.length; a < alen; a++) {\n    paths.push(expolygons[a].outer);\n    for (i = 0, ilen = expolygons[a].holes.length; i < ilen; i++) {\n      paths.push(expolygons[a].holes[i]);\n    }\n  }\n  return paths;\n}\nClipperLib.JS.PolyTreeToExPolygons = function (polytree) {\n  var expolygons = new ClipperLib.ExPolygons();\n  var node, i, childs, ilen;\n  for (i = 0, childs = polytree.Childs(), ilen = childs.length; i < ilen; i++) {\n    node = childs[i];\n    ClipperLib.JS.AddOuterPolyNodeToExPolygons(node, expolygons);\n  }\n  return expolygons;\n};\n\nmodule.exports = ClipperLib;\n"],"names":["this"],"mappings":"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"}